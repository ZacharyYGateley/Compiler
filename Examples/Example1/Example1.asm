; This code generated by com.zygateley.compiler

Data Section
    str0	DB	"Concatenate",0
    str1	DB	" a couple strings here, store the result to a variable,",0
    str2	DB	" concatenate the variable with one (",0
    str3	DB	") additional string, and output them.",0
    heapHandle	DD	0
    inputHandle	DD	0
    outputHandle	DD	0
    tempGlobal	DD	64 Dup 0

Code Section
start:
    ; Prepare environment for input and output
    ; Get process heap handle
    Call GetProcessHeap
    Mov [heapHandle], Eax               ; Save heap handle
    ; Get input handle
    Push -10D                           ; Parameter for GetStdHandle
    Call GetStdHandle
    Mov [inputHandle], Eax              ; Save input handle
    ; Get output handle
    Push -11D                           ; Parameter for GetStdHandle
    Call GetStdHandle
    Mov [outputHandle], Eax             ; Save output handle
    
    ; Open scope
    Mov Eax, 1028D                      ; Create heap allocation pool
    Push Eax                            ; Anonymous value added to stack
    Push 0                              ; Anonymous value added to stack
    Push [heapHandle]                   ; Anonymous value added to stack
    Call HeapAlloc
    Mov W[Eax], 0                       ; Number of current allocations
    Mov W[Eax + 2], 256                 ; Current allocation capacity
    Xor Ebx, Ebx                        ; Clear register for new usage
    Mov Ebx, Eax                        ; Address of heap allocation pool
    Push Ebx                            ; Linked variable added to stack
    ; Prepare if-then conditional
    ; If true, go to label0
    ; Finally, go to label1
    ; Prepare operand
    Xor Ecx, Ecx                        ; Clear register for new usage
    Mov Eax, 1D
    Mov Ecx, 1                          ; assemble operand TRUE
    Cmp Ecx, 0                          ; Determine if condition is false
    Jz > label1                         ; If condition is false, jump
    label0:
        Sub Esp, 4                      ; Open scope
        Mov Eax, 1028D                  ; Create heap allocation pool
        ; Caller save registers
        Push Ebx                        ; Anonymous value added to stack
        Push Ecx                        ; Anonymous value added to stack
        Push Eax                        ; Anonymous value added to stack
        Push 0                          ; Anonymous value added to stack
        Push [heapHandle]               ; Anonymous value added to stack
        Call HeapAlloc
        ; Caller restore registers
        Pop Ecx                         ; Anonymous value removed from stack
        Pop Ebx                         ; Anonymous value removed from stack
        Mov W[Eax], 0                   ; Number of current allocations
        Mov W[Eax + 2], 256             ; Current allocation capacity
        Xor Edx, Edx                    ; Clear register for new usage
        Mov Edx, Eax                    ; Address of heap allocation pool
        Push Edx                        ; Linked variable added to stack
        ; Store value to b
        ; Prepare operand
        Xor Esi, Esi                    ; Clear register for new usage
        Mov Eax, 11D
        Mov Esi, Addr str0              ; assemble operand LITERAL
        Push Esi                        ; Linked variable added to stack
        ; Prepare operand
        Xor Edi, Edi                    ; Clear register for new usage
        Mov Eax, 55D
        Mov Edi, Addr str1              ; assemble operand LITERAL
        Push Edi                        ; Linked variable added to stack
        ; Caller save registers
        Push Ecx                        ; Anonymous value added to stack
        Push Ebx                        ; Anonymous value added to stack
        Push Edx                        ; Anonymous value added to stack
        Push [Esp + 16D]                ; Anonymous value added to stack
        Call get_string_length
        Mov [tempGlobal], Eax
        Push [Esp + 12D]                ; Anonymous value added to stack
        Call get_string_length
        Mov [tempGlobal + 4], Eax
        Add Eax, [Esp + 4]              ; Sum string lengths
        ; Caller save registers
        Push Ecx                        ; Anonymous value added to stack
        Push Ebx                        ; Anonymous value added to stack
        Push Edx                        ; Anonymous value added to stack
        Push Eax                        ; Anonymous value added to stack
        Push [Esp + 36]                 ; Anonymous value added to stack
        Push [heapHandle]               ; Anonymous value added to stack
        Call add_heap_allocation
        ; Caller restore registers
        Pop Edx                         ; Anonymous value removed from stack
        Pop Ebx                         ; Anonymous value removed from stack
        Pop Ecx                         ; Anonymous value removed from stack
        Mov [tempGlobal + 8], Eax       ; Remember value in temp global
        ; Caller restore registers
        Pop Edx                         ; Anonymous value removed from stack
        Pop Ebx                         ; Anonymous value removed from stack
        Pop Ecx                         ; Anonymous value removed from stack
        Xor Esi, Esi                    ; Clear register for new usage
        Mov Esi, [Esp + 4D]
        ; Caller save registers
        Push Edx                        ; Anonymous value added to stack
        Push Ebx                        ; Anonymous value added to stack
        Push Ecx                        ; Anonymous value added to stack
        Push Esi                        ; Anonymous value added to stack
        Push [tempGlobal]               ; Anonymous value added to stack
        Push Eax                        ; Anonymous value added to stack
        Push Esi                        ; Anonymous value added to stack
        Call move_memory
        ; Caller restore registers
        Pop Esi                         ; Anonymous value removed from stack
        Pop Ecx                         ; Anonymous value removed from stack
        Pop Ebx                         ; Anonymous value removed from stack
        Pop Edx                         ; Anonymous value removed from stack
        Mov Esi, [Esp + 0D]
        ; Caller save registers
        Push Esi                        ; Anonymous value added to stack
        Push Ecx                        ; Anonymous value added to stack
        Push Ebx                        ; Anonymous value added to stack
        Push Edx                        ; Anonymous value added to stack
        Push [tempGlobal + 4]           ; Anonymous value added to stack
        Push Eax                        ; Anonymous value added to stack
        Push Esi                        ; Anonymous value added to stack
        Call move_memory
        ; Caller restore registers
        Pop Edx                         ; Anonymous value removed from stack
        Pop Ebx                         ; Anonymous value removed from stack
        Pop Ecx                         ; Anonymous value removed from stack
        Pop Esi                         ; Anonymous value removed from stack
        Mov B[Eax], 0                   ; Strings must end in 0
        Xor Edi, Edi                    ; Clear register for new usage
        Mov Edi, [tempGlobal + 8]       ; Move new string location to newly allocated register
        Mov Eax, [tempGlobal]
        Add Eax, [tempGlobal + 4]       ; Store string length in Eax
        
        Push Edi                        ; Linked variable added to stack
        Mov [Esp + 16D], Edi            ; Store value to variable
        
        ; Output
        ; Prepare operand
        Xor Edx, Edx                    ; Clear register for new usage
        ; Caller save registers
        Push Ebx                        ; Anonymous value added to stack
        Push Ecx                        ; Anonymous value added to stack
        Push Edx                        ; Anonymous value added to stack
        Push [Esp + 28D]                ; Anonymous value added to stack
        Call get_string_length
        ; Caller restore registers
        Pop Edx                         ; Anonymous value removed from stack
        Pop Ecx                         ; Anonymous value removed from stack
        Pop Ebx                         ; Anonymous value removed from stack
        Mov Edx, [Esp + 16D]            ; assemble operand VARIABLE
        ; Prepare operand
        Xor Esi, Esi                    ; Clear register for new usage
        Mov Eax, 36D
        Mov Esi, Addr str2              ; assemble operand LITERAL
        Push Esi                        ; Linked variable added to stack
        ; Caller save registers
        Push Ecx                        ; Anonymous value added to stack
        Push Ebx                        ; Anonymous value added to stack
        Push [Esp + 28D]                ; Anonymous value added to stack
        Call get_string_length
        Mov [tempGlobal], Eax
        Push [Esp + 8D]                 ; Anonymous value added to stack
        Call get_string_length
        Mov [tempGlobal + 4], Eax
        Add Eax, [Esp + 4]              ; Sum string lengths
        ; Caller save registers
        Push Ecx                        ; Anonymous value added to stack
        Push Ebx                        ; Anonymous value added to stack
        Push Eax                        ; Anonymous value added to stack
        Push [Esp + 36]                 ; Anonymous value added to stack
        Push [heapHandle]               ; Anonymous value added to stack
        Call add_heap_allocation
        ; Caller restore registers
        Pop Ebx                         ; Anonymous value removed from stack
        Pop Ecx                         ; Anonymous value removed from stack
        Mov [tempGlobal + 8], Eax       ; Remember value in temp global
        ; Caller restore registers
        Pop Ebx                         ; Anonymous value removed from stack
        Pop Ecx                         ; Anonymous value removed from stack
        Xor Edi, Edi                    ; Clear register for new usage
        Mov Edi, [Esp + 20D]
        ; Caller save registers
        Push Ebx                        ; Anonymous value added to stack
        Push Ecx                        ; Anonymous value added to stack
        Push Edi                        ; Anonymous value added to stack
        Push [tempGlobal]               ; Anonymous value added to stack
        Push Eax                        ; Anonymous value added to stack
        Push Edi                        ; Anonymous value added to stack
        Call move_memory
        ; Caller restore registers
        Pop Edi                         ; Anonymous value removed from stack
        Pop Ecx                         ; Anonymous value removed from stack
        Pop Ebx                         ; Anonymous value removed from stack
        Mov Edi, [Esp + 0D]
        ; Caller save registers
        Push Edi                        ; Anonymous value added to stack
        Push Ecx                        ; Anonymous value added to stack
        Push Ebx                        ; Anonymous value added to stack
        Push [tempGlobal + 4]           ; Anonymous value added to stack
        Push Eax                        ; Anonymous value added to stack
        Push Edi                        ; Anonymous value added to stack
        Call move_memory
        ; Caller restore registers
        Pop Ebx                         ; Anonymous value removed from stack
        Pop Ecx                         ; Anonymous value removed from stack
        Pop Edi                         ; Anonymous value removed from stack
        Mov B[Eax], 0                   ; Strings must end in 0
        Xor Edx, Edx                    ; Clear register for new usage
        Mov Edx, [tempGlobal + 8]       ; Move new string location to newly allocated register
        Mov Eax, [tempGlobal]
        Add Eax, [tempGlobal + 4]       ; Store string length in Eax
        
        Push Edx                        ; Linked variable added to stack
        ; Caller save registers
        Push Ebx                        ; Anonymous value added to stack
        Push Ecx                        ; Anonymous value added to stack
        Push Edx                        ; Anonymous value added to stack
        Push 0                          ; Anonymous value added to stack
        Push Addr tempGlobal            ; Anonymous value added to stack
        Push Eax                        ; Anonymous value added to stack
        Push Edx                        ; Anonymous value added to stack
        Push [outputHandle]             ; Anonymous value added to stack
        Call WriteConsoleA
        ; Caller restore registers
        Pop Edx                         ; Anonymous value removed from stack
        Pop Ecx                         ; Anonymous value removed from stack
        Pop Ebx                         ; Anonymous value removed from stack
        
        ; Output
        ; Prepare operand
        Xor Esi, Esi                    ; Clear register for new usage
        Mov Eax, 4D
        Mov Esi, 1D                     ; assemble operand LITERAL
        Push Esi                        ; Linked variable added to stack
            ; Convert integer to string in Addr tempGlobal
            ; Caller save registers
            Push Ecx                    ; Anonymous value added to stack
            Push Ebx                    ; Anonymous value added to stack
            Push Esi                    ; Anonymous value added to stack
                ; Clear global string Addr tempGlobal
                ; Caller save registers
                Push Ecx                ; Anonymous value added to stack
                Push Ebx                ; Anonymous value added to stack
                Push Esi                ; Anonymous value added to stack
                Push 256                ; Anonymous value added to stack
                Push Addr tempGlobal    ; Anonymous value added to stack
                Call clear_global_string
                ; Caller restore registers
                Pop Esi                 ; Anonymous value removed from stack
                Pop Ebx                 ; Anonymous value removed from stack
                Pop Ecx                 ; Anonymous value removed from stack
            Push 11D                    ; Anonymous value added to stack
            Push Addr tempGlobal        ; Anonymous value added to stack
            Push Esi                    ; Anonymous value added to stack
            Call int_to_string
            ; Caller restore registers
            Pop Esi                     ; Anonymous value removed from stack
            Pop Ebx                     ; Anonymous value removed from stack
            Pop Ecx                     ; Anonymous value removed from stack
            Mov Esi, Eax
            Not Esi                     ; Invert actual length
            Add Esi, 1D
            Add Esi, 11D                ; Add total available number of digits
            Add Esi, Addr tempGlobal    ; Positive offset from string pointer at which non-zero values start
        ; Caller save registers
        Push Esi                        ; Anonymous value added to stack
        Push Ebx                        ; Anonymous value added to stack
        Push Ecx                        ; Anonymous value added to stack
        Push 0                          ; Anonymous value added to stack
        Push Addr tempGlobal            ; Anonymous value added to stack
        Push Eax                        ; Anonymous value added to stack
        Push Esi                        ; Anonymous value added to stack
        Push [outputHandle]             ; Anonymous value added to stack
        Call WriteConsoleA
        ; Caller restore registers
        Pop Ecx                         ; Anonymous value removed from stack
        Pop Ebx                         ; Anonymous value removed from stack
        Pop Esi                         ; Anonymous value removed from stack
        
        ; Output
        ; Prepare operand
        Xor Edi, Edi                    ; Clear register for new usage
        Mov Eax, 37D
        Mov Edi, Addr str3              ; assemble operand LITERAL
        Push Edi                        ; Linked variable added to stack
        ; Caller save registers
        Push Ecx                        ; Anonymous value added to stack
        Push Ebx                        ; Anonymous value added to stack
        Push Edi                        ; Anonymous value added to stack
        Push 0                          ; Anonymous value added to stack
        Push Addr tempGlobal            ; Anonymous value added to stack
        Push Eax                        ; Anonymous value added to stack
        Push Edi                        ; Anonymous value added to stack
        Push [outputHandle]             ; Anonymous value added to stack
        Call WriteConsoleA
        ; Caller restore registers
        Pop Edi                         ; Anonymous value removed from stack
        Pop Ebx                         ; Anonymous value removed from stack
        Pop Ecx                         ; Anonymous value removed from stack
        
        Push [Esp + 28]                 ; Anonymous value added to stack
        Push [heapHandle]               ; Anonymous value added to stack
        Call free_heap_allocations
        Add Esp, 36                     ; Close scope
        
    
    label1:
    
    Push [Esp + 0]                      ; Anonymous value added to stack
    Push [heapHandle]                   ; Anonymous value added to stack
    Call free_heap_allocations
    Add Esp, 4                          ; Close scope
    
    Ret                                 ; Program finish
    


;;;;;;; INCLUDED FILE get_string_length.asm ;;;;;;;;


get_string_length:
	Push Ebp
	Mov Ebp, Esp
	Add Ebp, 8				; Single parameter at [Esp]
	
	Xor Eax, Eax			; Stores total number of characters

	Mov Ecx, [Ebp]			; Character position in string
							; Loop until this is == \0

.loop:
	Cmp B[Ecx], 0			; Value at storage location == \0?
	Je > .next

	Add Eax, 1				; num digits += 1
	Add Ecx, 1				; next address at +4 bytes

	Jmp < .loop

.next:
	Pop Ebp					; original base pointer
	Pop Edx					; this return address
	Add Esp, 4				; consume parameter
	Push Edx

	Ret						; total # digits in Eax

;;;;;;; INCLUDED FILE add_heap_allocation.asm ;;;;;;;;


add_heap_allocation:
	Push Ebp			; Realign base address to first parameter
	Mov Ebp, Esp
	Add Ebp, 8
	
	Push Ebx			; Callee saved
	
						; [Ebp]: Heap handle
						; [Ebp + 4]: Address of heap allocation pool
						; W[[Ebp + 4]]: Number of allocations
						; W[[Ebp + 4] + 2]: Allocation capacity
						; D[[Ebp + 4] + 4 * n]: Allocation n
						; [Ebp + 8]: Number of bytes requested
						
	Mov Ebx, [Ebp + 4]	; Address of heap allocation pool
	Add W[Ebx], 1		; D[Ebx]: High: Number of allocations, Low: Allocation capacity
	Mov Edx, D[Ebx]		; Pull to registers
	
	Cmp Dl, Dh
	Jl > .fail			; Not enough capacity for addition
	
.capable
	Push [Ebp + 8]		; Number of bytes required
	Push 0				; Flags
	Push [Ebp]			; Heap handle
	Call HeapAlloc
	; Newly allocated address in Eax
	Cmp Eax, 0
	Je > .fail
	
	; Add allocated address to heap allocation pool
	; Ebx should have persisted through HeapAlloc
	Xor Edx, Edx
	Mov Dx, W[Ebx]		; Number of allocations, @ first two bytes of heap allocation pool
	IMul Edx, 4D		; Address width, 4 bytes
	Add Edx, [Ebp + 4]	; Address of heap allocation pool
	
	Mov [Edx], Eax		; Newly allocated address to heap allocation pool

	Jmp > .finally

.fail:
	Mov Eax, 0			; Not enough space in heap allocation pool

.finally:
	Pop Ebx				; Restore callee saved
	
	Pop Ebp				; Original base pointer
	Pop Edx				; This procedure's return address
	
	Add Esp, 12D		; Consume parameters
	
	Push Edx			; Restore this procedure's return address
	
	Ret
	

;;;;;;; INCLUDED FILE move_memory.asm ;;;;;;;;


move_memory:
	Push Ebp
	Mov Ebp, Esp
	Add Ebp, 8			; [Ebp + 0] == fromAddress itself
						; [Ebp + 4] == location with toAddress
						; [Ebp + 8] == number of bytes to transfer
						
	Push Ebx			; Callee saved
	
	Mov Eax, [Ebp + 4]	; Location with to address
	Mov Edx, [Ebp + 0]	; Location with from address
	
	Xor Ecx, Ecx
	
.loop:
	Cmp Ecx, [Ebp + 8]
	Jz > .next
	
	Mov Bl, B[Edx]		; Get value of "from" byte
	Mov B[Eax], Bl		; Move value to "to" byte
	
	Add Eax, 1			; Increment "to" byte address
	Add Edx, 1			; Increment "from" byte address
	
	Add Ecx, 1			; Increment iteratation variable
	
	Jmp < .loop

.next:
	Pop Ebx				; Restore callee saved registers
	
	Pop Ebp				; Actual base pointer
	Pop Edx				; This procedure's return location
	Add Esp, 12D		; Consume parameters
	
	Push Edx
	
	Ret

;;;;;;; INCLUDED FILE clear_global_string.asm ;;;;;;;;


clear_global_string:
	Push Ebp
	Mov Ebp, Esp
	Add Ebp, 8			; Skip old Ebp and Return address
	
						; Param 1 [Ebp + 0 ]: Data location
						; Param 2 [Ebp + 4 ]: Number of bytes to set to 0
	
	Mov Eax, [Ebp]
	Mov Ecx, 0
	Mov Edx, [Ebp + 4]
	
clear_global_string_loop:
	Cmp Ecx, Edx
	Jz > clear_global_string_next
	
	Mov B[Eax], 0
	Add Eax, 4
	Add Ecx, 1
	
	Jmp < clear_global_string_loop

clear_global_string_next:
	Pop Ebp				; Original base pointer
	Pop Ecx				; Return address
	Add Esp, 8			; Consume parameters
	Push Ecx			; Return address belongs in first position in stack
	
	Ret

;;;;;;; INCLUDED FILE int_to_string.asm ;;;;;;;;


int_to_string:
	; loop through bits of number from least sig to most sig
	; convert digit to character (+ 0x30)
	; place at end of result location

	Push Ebp
	Mov Ebp, Esp
	Add Ebp, 8				; skip return address
							; [ebp] 	first arg 	== number
							; [ebp+4] 	second arg 	== address of data location to store string (e.g. 11 bytes)
							; [ebp+8] 	third arg 	== # of digits to convert at data location sign (e.g. 11)


	Mov Eax, [Ebp]			; number to convert
	Cmp Eax, 0
	Jge > int_to_string_pos

	; store sign for later	; [esp + 4]
int_to_string_neg:
	Push 1   				; negative
	Not Eax
	Add Eax, 1				; invert eax
	Mov [Ebp], Eax			; save as POSTIVE number
							; already have negative sign character
	Jmp int_to_string_signfin

int_to_string_pos:
	Push 0 					; positive
	

int_to_string_signfin:
	Mov Eax, [Ebp + 8]		; # total characters to print, exclusive
	Sub Eax, 1				; inclusive
	Add Eax, [Ebp + 4]		; inclusive last character position
	Push Eax				; [esp] = ptr to highest unused character position

	Mov Eax, [Ebp]			; number to convert

	Xor Ecx, Ecx
	Sub Ecx, 1				; i = -1

int_to_string_loop:
	Add Ecx, 1
	Cmp Ecx, [Ebp + 8]		; for i = 0 to 10
	Jz > int_to_string_addsign

	Mov Ebx, 10D			; divisor
	Xor Edx, Edx			; need to clear remainder before divide
	Mov Esi, [Esp + 4]		; 1==neg, 0==pos
	Cmp Esi, 0
	Je > int_to_string_skipsign
	Cdq						; sign extend into edx
int_to_string_skipsign:
	IDiv Ebx				; result number to eax
							; remainder digit in edx
	Add Edx, 0X30			; convert to ascii digit

	Mov Ebx, [Esp]			; address of last character position
	Mov B[Ebx], Dl			; store digit (low byte) in last character position

	Cmp Eax, 0				; are the remaining digits all 0?
	Jz > int_to_string_addsign			; then have done all of the characters we can

	Sub D[Esp], 1			; decrement last character position by 1 byte

	Jmp < int_to_string_loop	; iterate

int_to_string_addsign:
							; make room for sign
	Sub D[Esp], 1			; character left of last output
	Mov Ebx, [Esp]			; ptr to ptr. Dereference once

	Mov Eax, [Esp + 4D]		; 0==pos, 1==neg
	Cmp Eax, 0
	Je > int_to_string_final

	Mov B[Ebx], 0X2D		; add sign at beg of string
	Add Ecx, 1				; indicate length of string has increased by 1

int_to_string_final:
	Add Esp, 8				; last character position, sign character
	Pop Ebp					; restore base pointer

	Pop Ebx					; Return address
	Add Esp, 12				; Consume parameters
	Push Ebx				; Put return address back into the stack

	Mov Eax, Ecx			; actual length - 1
	Add Eax, 1

	Ret

;;;;;;; INCLUDED FILE free_heap_allocations.asm ;;;;;;;;


free_heap_allocations:
	Push Ebp			; Realign base address to first parameter
	Mov Ebp, Esp
	Add Ebp, 8
	
	Push Ebx			; Callee saved
	
	
						; [Ebp]: Heap handle
						; [Ebp + 4]: Address of heap allocation pool
						; W[[Ebp + 4]]: Number of allocations
						; W[[Ebp + 4] + 2]: Allocation capacity
						; D[[Ebp + 4] + 4 * n]: Allocation n
						
	Mov Ebx, [Ebp + 4]	; Address of heap allocation pool
	Xor Cx, Cx
	
	Xor Edx, Edx
	Mov Dx, W[Ebx]		; Number of allocations
	Add Ebx, 4			; First allocation address
	
.loop:
	Cmp Cx, Dx
	Jz > .next
	
	Push Ecx, Edx		; Save local vars
	
	Push [Ebx]			; This allocation address
	Push 0				; Flags
	Push [Ebp]			; Heap handle
	Call HeapFree
	
	Pop Edx, Ecx		; Recall local vars
	
	Add Ebx, 4
	Add Cx, 1

	Jmp < .loop

.next:
	Push [Ebp + 4]		; Free heap pool itself
	Push 0				; Flags
	Push [Ebp]			; Heap handle
	Call HeapFree
	
	Mov Eax, 1

.finally:
	Pop Ebx				; Restore callee saved
	
	Pop Ebp				; Original base pointer
	Pop Edx				; This procedure's return address
	
	Add Esp, 8			; Consume parameters
	
	Push Edx
	
	Ret
	