; This code was automatically generated by
; com.zygateley.compiler.Assembler#assemble
; using the GoAsm assembly language

Data Section
    ; String pool
    str0	DB	"Demonstrate string concatenation and output:",10,0
    str1	DB	"First, ",0
    str2	DB	"concatenate",0
    str3	DB	" a few strings",0
    str4	DB	" and store the result to a variable.",0
    str5	DB	10,"Later, concatenate the variable with an additional string, and output result.",10,10,0
    str6	DB	"Anything else you would like to say? ",0
    str7	DB	10,'"',0
    str8	DB	'"',10,10,0
    str9	DB	"Demonstrate arithmetic operations:",10,0
    str10	DB	"1 + 2 - 3 * 4 / 5 = ",0
    str11	DB	10,10,0
    str12	DB	"Demonstrate boolean operations:",10,0
    str13	DB	"-1 ? -2 ... (==, !=, <, <=, >, >=)",10,0
    str14	DB	10,0
    str15	DB	"Demonstrate operator precedence:",10,0
    str16	DB	"4 >= 5 && 6 < 7 - 2 && true || !false = ",0
    str17	DB	"Demonstrate string comparison:",0
    str18	DB	10,'"',"abc",'"'," == ",'"',"def",'"'," = ",0
    str19	DB	"abc",0
    str20	DB	"def",0
    str21	DB	10,'"',"abc",'"'," != ",'"',"def",'"'," = ",0
    str22	DB	10,'"',"abc",'"'," == ",'"',"abc",'"'," = ",0
    str23	DB	10,'"',"a",'"',"   == ",'"',"abc",'"'," = ",0
    str24	DB	"a",0
    str25	DB	10,'"',"abc",'"'," == ",'"',"a",'"',"   = ",0
    trueString	DB	"TRUE",0
    falseString	DB	"FALSE",0
    
    ; Other global variables
    heapHandle	DD	0
    inputHandle	DD	0
    outputHandle	DD	0
    tempGlobal	DD	64 Dup 0

Code Section
start:
    ; Prepare environment for input and output
    ; Get process heap handle
    Call GetProcessHeap
    Mov [heapHandle], Eax               ; Save heap handle
    ; Get input handle
    Push -10D                           ; Parameter for GetStdHandle
    Call GetStdHandle
    Mov [inputHandle], Eax              ; Save input handle
    ; Get output handle
    Push -11D                           ; Parameter for GetStdHandle
    Call GetStdHandle
    Mov [outputHandle], Eax             ; Save output handle
    
    Sub Esp, 4                          ; Open scope
    Mov Eax, 1028D                      ; Create heap allocation pool
    Push Eax                            ; Anonymous value added to stack
    Push 0                              ; Anonymous value added to stack
    Push [heapHandle]                   ; Anonymous value added to stack
    Call HeapAlloc
    Mov W[Eax], 0                       ; Number of current allocations
    Mov W[Eax + 2], 256                 ; Current allocation capacity
    Mov Ebx, Eax                        ; Address of heap allocation pool
    Push Ebx                            ; Linked variable added to stack
    ; Prepare if-then conditional
    ; If true, go to label0
    ; Finally, go to label1
    ; Prepare operand
    Mov Eax, 1D
    Mov Ecx, 1                          ; assemble operand TRUE
    Push Ecx                            ; Linked variable added to stack
    Cmp Ecx, 0                          ; Determine if condition is false
    Jz > label1                         ; If condition is false, jump
    label0:
        Sub Esp, 12                     ; Open scope
        Mov Eax, 1028D                  ; Create heap allocation pool
        Push Eax                        ; Anonymous value added to stack
        Push 0                          ; Anonymous value added to stack
        Push [heapHandle]               ; Anonymous value added to stack
        Call HeapAlloc
        Mov W[Eax], 0                   ; Number of current allocations
        Mov W[Eax + 2], 256             ; Current allocation capacity
        Mov Edx, Eax                    ; Address of heap allocation pool
        Push Edx                        ; Linked variable added to stack
        ; Output
        ; Prepare operand
        Mov Eax, 45D
        Mov Esi, Addr str0              ; assemble operand LITERAL
        Push Esi                        ; Linked variable added to stack
        ; Caller save registers Esi
        Push Esi                        ; Anonymous value added to stack
        Push 0                          ; Anonymous value added to stack
        Push Addr tempGlobal            ; Anonymous value added to stack
        Push Eax                        ; Anonymous value added to stack
        Push Esi                        ; Anonymous value added to stack
        Push [outputHandle]             ; Anonymous value added to stack
        Call WriteConsoleA
        ; Caller restore registers Esi
        Pop Esi                         ; Anonymous value removed from stack
        
        ; Store value to first
        ; Prepare operand
        Mov Eax, 7D
        Mov Edi, Addr str1              ; assemble operand LITERAL
        Mov [Esp + 16D], Edi            ; Store value to variable
        
        ; Store value to second
        ; Prepare operand
        Mov Eax, 11D
        Mov Ebx, Addr str2              ; assemble operand LITERAL
        Push Ebx                        ; Linked variable added to stack
        ; Prepare operand
        Mov Eax, 14D
        Mov Ecx, Addr str3              ; assemble operand LITERAL
        Push Ecx                        ; Linked variable added to stack
        Push [Esp + 4D]                 ; Anonymous value added to stack
        Call get_string_length
        Mov [tempGlobal], Eax
        Push [Esp + 0D]                 ; Anonymous value added to stack
        Call get_string_length
        Mov [tempGlobal + 4], Eax
        Add Eax, [Esp + 4]              ; Sum string lengths
        Push Eax                        ; Anonymous value added to stack
        Push [Esp + 16]                 ; Anonymous value added to stack
        Push [heapHandle]               ; Anonymous value added to stack
        Call add_heap_allocation
        Mov [tempGlobal + 8], Eax       ; Remember value in temp global
        Mov Edx, [Esp + 4D]
        ; Caller save registers Edx
        Push Edx                        ; Anonymous value added to stack
        Push [tempGlobal]               ; Anonymous value added to stack
        Push Eax                        ; Anonymous value added to stack
        Push Edx                        ; Anonymous value added to stack
        Call move_memory
        ; Caller restore registers Edx
        Pop Edx                         ; Anonymous value removed from stack
        Mov Edx, [Esp + 0D]
        ; Caller save registers Edx
        Push Edx                        ; Anonymous value added to stack
        Push [tempGlobal + 4]           ; Anonymous value added to stack
        Push Eax                        ; Anonymous value added to stack
        Push Edx                        ; Anonymous value added to stack
        Call move_memory
        ; Caller restore registers Edx
        Pop Edx                         ; Anonymous value removed from stack
        Mov B[Eax], 0                   ; Strings must end in 0
        Mov Esi, [tempGlobal + 8]       ; Move new string location to newly allocated register
        Mov Eax, [tempGlobal]
        Add Eax, [tempGlobal + 4]       ; Store string length in Eax
        
        Push Esi                        ; Linked variable added to stack
        ; Prepare operand
        Mov Eax, 36D
        Mov Edi, Addr str4              ; assemble operand LITERAL
        Push Edi                        ; Linked variable added to stack
        Push [Esp + 4D]                 ; Anonymous value added to stack
        Call get_string_length
        Mov [tempGlobal], Eax
        Push [Esp + 0D]                 ; Anonymous value added to stack
        Call get_string_length
        Mov [tempGlobal + 4], Eax
        Add Eax, [Esp + 4]              ; Sum string lengths
        Push Eax                        ; Anonymous value added to stack
        Push [Esp + 24]                 ; Anonymous value added to stack
        Push [heapHandle]               ; Anonymous value added to stack
        Call add_heap_allocation
        Mov [tempGlobal + 8], Eax       ; Remember value in temp global
        Mov Ebx, [Esp + 4D]
        ; Caller save registers Ebx
        Push Ebx                        ; Anonymous value added to stack
        Push [tempGlobal]               ; Anonymous value added to stack
        Push Eax                        ; Anonymous value added to stack
        Push Ebx                        ; Anonymous value added to stack
        Call move_memory
        ; Caller restore registers Ebx
        Pop Ebx                         ; Anonymous value removed from stack
        Mov Ebx, [Esp + 0D]
        ; Caller save registers Ebx
        Push Ebx                        ; Anonymous value added to stack
        Push [tempGlobal + 4]           ; Anonymous value added to stack
        Push Eax                        ; Anonymous value added to stack
        Push Ebx                        ; Anonymous value added to stack
        Call move_memory
        ; Caller restore registers Ebx
        Pop Ebx                         ; Anonymous value removed from stack
        Mov B[Eax], 0                   ; Strings must end in 0
        Mov Ecx, [tempGlobal + 8]       ; Move new string location to newly allocated register
        Mov Eax, [tempGlobal]
        Add Eax, [tempGlobal + 4]       ; Store string length in Eax
        
        Mov [Esp + 28D], Ecx            ; Store value to variable
        
        ; Output
        ; Prepare operand
        Push [Esp + 32D]                ; Anonymous value added to stack
        Call get_string_length
        Mov Edx, [Esp + 32D]            ; assemble operand VARIABLE
        ; Prepare operand
        Push [Esp + 28D]                ; Anonymous value added to stack
        Call get_string_length
        Mov Esi, [Esp + 28D]            ; assemble operand VARIABLE
        Push [Esp + 32D]                ; Anonymous value added to stack
        Call get_string_length
        Mov [tempGlobal], Eax
        Push [Esp + 28D]                ; Anonymous value added to stack
        Call get_string_length
        Mov [tempGlobal + 4], Eax
        Add Eax, [Esp + 4]              ; Sum string lengths
        Push Eax                        ; Anonymous value added to stack
        Push [Esp + 24]                 ; Anonymous value added to stack
        Push [heapHandle]               ; Anonymous value added to stack
        Call add_heap_allocation
        Mov [tempGlobal + 8], Eax       ; Remember value in temp global
        Mov Edi, [Esp + 32D]
        ; Caller save registers Edi
        Push Edi                        ; Anonymous value added to stack
        Push [tempGlobal]               ; Anonymous value added to stack
        Push Eax                        ; Anonymous value added to stack
        Push Edi                        ; Anonymous value added to stack
        Call move_memory
        ; Caller restore registers Edi
        Pop Edi                         ; Anonymous value removed from stack
        Mov Edi, [Esp + 28D]
        ; Caller save registers Edi
        Push Edi                        ; Anonymous value added to stack
        Push [tempGlobal + 4]           ; Anonymous value added to stack
        Push Eax                        ; Anonymous value added to stack
        Push Edi                        ; Anonymous value added to stack
        Call move_memory
        ; Caller restore registers Edi
        Pop Edi                         ; Anonymous value removed from stack
        Mov B[Eax], 0                   ; Strings must end in 0
        Mov Ebx, [tempGlobal + 8]       ; Move new string location to newly allocated register
        Mov Eax, [tempGlobal]
        Add Eax, [tempGlobal + 4]       ; Store string length in Eax
        
        Push Ebx                        ; Linked variable added to stack
        ; Prepare operand
        Mov Eax, 80D
        Mov Ecx, Addr str5              ; assemble operand LITERAL
        Push Ecx                        ; Linked variable added to stack
        Push [Esp + 4D]                 ; Anonymous value added to stack
        Call get_string_length
        Mov [tempGlobal], Eax
        Push [Esp + 0D]                 ; Anonymous value added to stack
        Call get_string_length
        Mov [tempGlobal + 4], Eax
        Add Eax, [Esp + 4]              ; Sum string lengths
        Push Eax                        ; Anonymous value added to stack
        Push [Esp + 32]                 ; Anonymous value added to stack
        Push [heapHandle]               ; Anonymous value added to stack
        Call add_heap_allocation
        Mov [tempGlobal + 8], Eax       ; Remember value in temp global
        Mov Edx, [Esp + 4D]
        ; Caller save registers Edx
        Push Edx                        ; Anonymous value added to stack
        Push [tempGlobal]               ; Anonymous value added to stack
        Push Eax                        ; Anonymous value added to stack
        Push Edx                        ; Anonymous value added to stack
        Call move_memory
        ; Caller restore registers Edx
        Pop Edx                         ; Anonymous value removed from stack
        Mov Edx, [Esp + 0D]
        ; Caller save registers Edx
        Push Edx                        ; Anonymous value added to stack
        Push [tempGlobal + 4]           ; Anonymous value added to stack
        Push Eax                        ; Anonymous value added to stack
        Push Edx                        ; Anonymous value added to stack
        Call move_memory
        ; Caller restore registers Edx
        Pop Edx                         ; Anonymous value removed from stack
        Mov B[Eax], 0                   ; Strings must end in 0
        Mov Esi, [tempGlobal + 8]       ; Move new string location to newly allocated register
        Mov Eax, [tempGlobal]
        Add Eax, [tempGlobal + 4]       ; Store string length in Eax
        
        Push Esi                        ; Linked variable added to stack
        ; Caller save registers Esi
        Push Esi                        ; Anonymous value added to stack
        Push 0                          ; Anonymous value added to stack
        Push Addr tempGlobal            ; Anonymous value added to stack
        Push Eax                        ; Anonymous value added to stack
        Push Esi                        ; Anonymous value added to stack
        Push [outputHandle]             ; Anonymous value added to stack
        Call WriteConsoleA
        ; Caller restore registers Esi
        Pop Esi                         ; Anonymous value removed from stack
        
        ; Output
        ; Prepare operand
        Mov Eax, 37D
        Mov Edi, Addr str6              ; assemble operand LITERAL
        Push Edi                        ; Linked variable added to stack
        ; Caller save registers Edi
        Push Edi                        ; Anonymous value added to stack
        Push 0                          ; Anonymous value added to stack
        Push Addr tempGlobal            ; Anonymous value added to stack
        Push Eax                        ; Anonymous value added to stack
        Push Edi                        ; Anonymous value added to stack
        Push [outputHandle]             ; Anonymous value added to stack
        Call WriteConsoleA
        ; Caller restore registers Edi
        Pop Edi                         ; Anonymous value removed from stack
        
        ; Input
        Push 0                          ; Anonymous value added to stack
        Mov Eax, Esp
        Push 0                          ; Anonymous value added to stack
        Push Eax                        ; Anonymous value added to stack
        Push 256                        ; Anonymous value added to stack
        Push Addr tempGlobal            ; Anonymous value added to stack
        Push [inputHandle]              ; Anonymous value added to stack
        Call ReadConsoleA
        Push [Esp]                      ; Anonymous value added to stack
        Push [Esp + 44]                 ; Anonymous value added to stack
        Push [heapHandle]               ; Anonymous value added to stack
        Call add_heap_allocation
        Mov [Esp + 44D], Eax
        Push [Esp]                      ; Anonymous value added to stack
        Push Eax                        ; Anonymous value added to stack
        Push Addr tempGlobal            ; Anonymous value added to stack
        Call move_memory
        Sub Eax, 2
        Mov B[Eax], 0                   ; Remove 13,10 add 0
        Mov Eax, [Esp + 4]              ; Retrieve number of characters
        Sub Eax, 1                      ; Account for 13,10 replaced with 0
        
        ; Output
        ; Prepare operand
        Mov Eax, 2D
        Mov Ebx, Addr str7              ; assemble operand LITERAL
        Push Ebx                        ; Linked variable added to stack
        ; Prepare operand
        Push [Esp + 48D]                ; Anonymous value added to stack
        Call get_string_length
        Mov Ecx, [Esp + 48D]            ; assemble operand VARIABLE
        Push [Esp + 0D]                 ; Anonymous value added to stack
        Call get_string_length
        Mov [tempGlobal], Eax
        Push [Esp + 48D]                ; Anonymous value added to stack
        Call get_string_length
        Mov [tempGlobal + 4], Eax
        Add Eax, [Esp + 4]              ; Sum string lengths
        Push Eax                        ; Anonymous value added to stack
        Push [Esp + 48]                 ; Anonymous value added to stack
        Push [heapHandle]               ; Anonymous value added to stack
        Call add_heap_allocation
        Mov [tempGlobal + 8], Eax       ; Remember value in temp global
        Mov Edx, [Esp + 0D]
        ; Caller save registers Edx
        Push Edx                        ; Anonymous value added to stack
        Push [tempGlobal]               ; Anonymous value added to stack
        Push Eax                        ; Anonymous value added to stack
        Push Edx                        ; Anonymous value added to stack
        Call move_memory
        ; Caller restore registers Edx
        Pop Edx                         ; Anonymous value removed from stack
        Mov Edx, [Esp + 48D]
        ; Caller save registers Edx
        Push Edx                        ; Anonymous value added to stack
        Push [tempGlobal + 4]           ; Anonymous value added to stack
        Push Eax                        ; Anonymous value added to stack
        Push Edx                        ; Anonymous value added to stack
        Call move_memory
        ; Caller restore registers Edx
        Pop Edx                         ; Anonymous value removed from stack
        Mov B[Eax], 0                   ; Strings must end in 0
        Mov Esi, [tempGlobal + 8]       ; Move new string location to newly allocated register
        Mov Eax, [tempGlobal]
        Add Eax, [tempGlobal + 4]       ; Store string length in Eax
        
        Push Esi                        ; Linked variable added to stack
        ; Prepare operand
        Mov Eax, 3D
        Mov Edi, Addr str8              ; assemble operand LITERAL
        Push Edi                        ; Linked variable added to stack
        Push [Esp + 4D]                 ; Anonymous value added to stack
        Call get_string_length
        Mov [tempGlobal], Eax
        Push [Esp + 0D]                 ; Anonymous value added to stack
        Call get_string_length
        Mov [tempGlobal + 4], Eax
        Add Eax, [Esp + 4]              ; Sum string lengths
        Push Eax                        ; Anonymous value added to stack
        Push [Esp + 56]                 ; Anonymous value added to stack
        Push [heapHandle]               ; Anonymous value added to stack
        Call add_heap_allocation
        Mov [tempGlobal + 8], Eax       ; Remember value in temp global
        Mov Ebx, [Esp + 4D]
        ; Caller save registers Ebx
        Push Ebx                        ; Anonymous value added to stack
        Push [tempGlobal]               ; Anonymous value added to stack
        Push Eax                        ; Anonymous value added to stack
        Push Ebx                        ; Anonymous value added to stack
        Call move_memory
        ; Caller restore registers Ebx
        Pop Ebx                         ; Anonymous value removed from stack
        Mov Ebx, [Esp + 0D]
        ; Caller save registers Ebx
        Push Ebx                        ; Anonymous value added to stack
        Push [tempGlobal + 4]           ; Anonymous value added to stack
        Push Eax                        ; Anonymous value added to stack
        Push Ebx                        ; Anonymous value added to stack
        Call move_memory
        ; Caller restore registers Ebx
        Pop Ebx                         ; Anonymous value removed from stack
        Mov B[Eax], 0                   ; Strings must end in 0
        Mov Ecx, [tempGlobal + 8]       ; Move new string location to newly allocated register
        Mov Eax, [tempGlobal]
        Add Eax, [tempGlobal + 4]       ; Store string length in Eax
        
        Push Ecx                        ; Linked variable added to stack
        ; Caller save registers Ecx
        Push Ecx                        ; Anonymous value added to stack
        Push 0                          ; Anonymous value added to stack
        Push Addr tempGlobal            ; Anonymous value added to stack
        Push Eax                        ; Anonymous value added to stack
        Push Ecx                        ; Anonymous value added to stack
        Push [outputHandle]             ; Anonymous value added to stack
        Call WriteConsoleA
        ; Caller restore registers Ecx
        Pop Ecx                         ; Anonymous value removed from stack
        
        Push [Esp + 56]                 ; Anonymous value added to stack
        Push [heapHandle]               ; Anonymous value added to stack
        Call free_heap_allocations
        Add Esp, 72                     ; Close scope
        
    
    label1:
    
    ; Output
    ; Prepare operand
    Mov Eax, 35D
    Mov Edx, Addr str9                  ; assemble operand LITERAL
    Push Edx                            ; Linked variable added to stack
    ; Caller save registers Edx
    Push Edx                            ; Anonymous value added to stack
    Push 0                              ; Anonymous value added to stack
    Push Addr tempGlobal                ; Anonymous value added to stack
    Push Eax                            ; Anonymous value added to stack
    Push Edx                            ; Anonymous value added to stack
    Push [outputHandle]                 ; Anonymous value added to stack
    Call WriteConsoleA
    ; Caller restore registers Edx
    Pop Edx                             ; Anonymous value removed from stack
    
    ; Output
    ; Prepare operand
    Mov Eax, 20D
    Mov Esi, Addr str10                 ; assemble operand LITERAL
    Push Esi                            ; Linked variable added to stack
    ; Caller save registers Esi
    Push Esi                            ; Anonymous value added to stack
    Push 0                              ; Anonymous value added to stack
    Push Addr tempGlobal                ; Anonymous value added to stack
    Push Eax                            ; Anonymous value added to stack
    Push Esi                            ; Anonymous value added to stack
    Push [outputHandle]                 ; Anonymous value added to stack
    Call WriteConsoleA
    ; Caller restore registers Esi
    Pop Esi                             ; Anonymous value removed from stack
    
    ; Store value to a
    ; Prepare operand
    Mov Eax, 4D
    Mov Edi, 1D                         ; assemble operand LITERAL
    Push Edi                            ; Linked variable added to stack
    ; Prepare operand
    Mov Eax, 4D
    Mov Ebx, 2D                         ; assemble operand LITERAL
    Push Ebx                            ; Linked variable added to stack
    Mov Ecx, [Esp + 4]                  ; Retrieve value from stack
    Mov Edx, [Esp + 0]                  ; Retrieve value from stack
    Mov Esi, Ecx                        ; Prepare integer addition
    Add Esi, Edx
    
    Push Esi                            ; Linked variable added to stack
    ; Prepare operand
    Mov Eax, 4D
    Mov Edi, 3D                         ; assemble operand LITERAL
    Push Edi                            ; Linked variable added to stack
    ; Prepare operand
    Mov Eax, 4D
    Mov Ebx, 4D                         ; assemble operand LITERAL
    Push Ebx                            ; Linked variable added to stack
    Mov Ecx, [Esp + 4]                  ; Retrieve value from stack
    Mov Edx, [Esp + 0]                  ; Retrieve value from stack
    Mov Eax, Ecx                        ; Prepare integer multiplication
    IMul Edx
    Mov Esi, Eax
    
    Push Esi                            ; Linked variable added to stack
    ; Prepare operand
    Mov Eax, 4D
    Mov Edi, 5D                         ; assemble operand LITERAL
    Push Edi                            ; Linked variable added to stack
    Mov Ebx, [Esp + 4]                  ; Retrieve value from stack
    Mov Ecx, [Esp + 0]                  ; Retrieve value from stack
    Mov Eax, Ebx                        ; Prepare integer division
    Xor Edx, Edx                        ; Must clear Edx for integer division
    IDiv Ecx
    Mov Edx, Eax
    
    Push Edx                            ; Linked variable added to stack
    Mov Esi, [Esp + 20]                 ; Retrieve value from stack
    Mov Edi, [Esp + 0]                  ; Retrieve value from stack
    Mov Ebx, Esi                        ; Prepare integer subtraction
    Sub Ebx, Edi
    
    Mov [Esp + 48D], Ebx                ; Store value to variable
    
    ; Output
    ; Prepare operand
    Mov Eax, 4D
    Mov Ecx, [Esp + 48D]                ; assemble operand VARIABLE
        ; Convert integer to string in Addr tempGlobal
        ; Caller save registers Ecx
        Push Ecx                        ; Anonymous value added to stack
            ; Clear global string Addr tempGlobal
            ; Caller save registers Ecx
            Push Ecx                    ; Anonymous value added to stack
            Push 256                    ; Anonymous value added to stack
            Push Addr tempGlobal        ; Anonymous value added to stack
            Call clear_global_string
            ; Caller restore registers Ecx
            Pop Ecx                     ; Anonymous value removed from stack
        Push 11D                        ; Anonymous value added to stack
        Push Addr tempGlobal            ; Anonymous value added to stack
        Push Ecx                        ; Anonymous value added to stack
        Call int_to_string
        ; Caller restore registers Ecx
        Pop Ecx                         ; Anonymous value removed from stack
        Mov Ecx, Eax
        Not Ecx                         ; Invert actual length
        Add Ecx, 1D
        Add Ecx, 11D                    ; Add total available number of digits
        Add Ecx, Addr tempGlobal        ; Positive offset from string pointer at which non-zero values start
    ; Caller save registers Ecx
    Push Ecx                            ; Anonymous value added to stack
    Push 0                              ; Anonymous value added to stack
    Push Addr tempGlobal                ; Anonymous value added to stack
    Push Eax                            ; Anonymous value added to stack
    Push Ecx                            ; Anonymous value added to stack
    Push [outputHandle]                 ; Anonymous value added to stack
    Call WriteConsoleA
    ; Caller restore registers Ecx
    Pop Ecx                             ; Anonymous value removed from stack
    
    ; Output
    ; Prepare operand
    Mov Eax, 2D
    Mov Edx, Addr str11                 ; assemble operand LITERAL
    Push Edx                            ; Linked variable added to stack
    ; Caller save registers Edx
    Push Edx                            ; Anonymous value added to stack
    Push 0                              ; Anonymous value added to stack
    Push Addr tempGlobal                ; Anonymous value added to stack
    Push Eax                            ; Anonymous value added to stack
    Push Edx                            ; Anonymous value added to stack
    Push [outputHandle]                 ; Anonymous value added to stack
    Call WriteConsoleA
    ; Caller restore registers Edx
    Pop Edx                             ; Anonymous value removed from stack
    
    ; Output
    ; Prepare operand
    Mov Eax, 32D
    Mov Esi, Addr str12                 ; assemble operand LITERAL
    Push Esi                            ; Linked variable added to stack
    ; Caller save registers Esi
    Push Esi                            ; Anonymous value added to stack
    Push 0                              ; Anonymous value added to stack
    Push Addr tempGlobal                ; Anonymous value added to stack
    Push Eax                            ; Anonymous value added to stack
    Push Esi                            ; Anonymous value added to stack
    Push [outputHandle]                 ; Anonymous value added to stack
    Call WriteConsoleA
    ; Caller restore registers Esi
    Pop Esi                             ; Anonymous value removed from stack
    
    ; Output
    ; Prepare operand
    Mov Eax, 35D
    Mov Edi, Addr str13                 ; assemble operand LITERAL
    Push Edi                            ; Linked variable added to stack
    ; Caller save registers Edi
    Push Edi                            ; Anonymous value added to stack
    Push 0                              ; Anonymous value added to stack
    Push Addr tempGlobal                ; Anonymous value added to stack
    Push Eax                            ; Anonymous value added to stack
    Push Edi                            ; Anonymous value added to stack
    Push [outputHandle]                 ; Anonymous value added to stack
    Call WriteConsoleA
    ; Caller restore registers Edi
    Pop Edi                             ; Anonymous value removed from stack
    
    ; Output
    ; Prepare operand
    Mov Eax, 4D
    Mov Ebx, -1D                        ; assemble operand LITERAL
    Push Ebx                            ; Linked variable added to stack
    ; Prepare operand
    Mov Eax, 4D
    Mov Ecx, -2D                        ; assemble operand LITERAL
    Push Ecx                            ; Linked variable added to stack
    Mov Edx, [Esp + 4]                  ; Retrieve value from stack
    Mov Esi, [Esp + 0]                  ; Retrieve value from stack
    Cmp Edx, Esi                        ; Prepare integer comparision
    Mov Edi, 1
    Je > label2
    Xor Edi, Edi
label2:
    
    Push Edi                            ; Linked variable added to stack
    Cmp Edi, 0                          ; Prepare boolean to string
    Jz > label3
    Mov [tempGlobal], Addr trueString
    Mov Eax, 4
    Jmp > label4
label3:
    Mov [tempGlobal], Addr falseString
    Mov Eax, 5
label4:
    ; Caller save registers Edi
    Push Edi                            ; Anonymous value added to stack
    Push 0                              ; Anonymous value added to stack
    Push Addr tempGlobal                ; Anonymous value added to stack
    Push Eax                            ; Anonymous value added to stack
    Push [tempGlobal]                   ; Anonymous value added to stack
    Push [outputHandle]                 ; Anonymous value added to stack
    Call WriteConsoleA
    ; Caller restore registers Edi
    Pop Edi                             ; Anonymous value removed from stack
    
    ; Output
    ; Prepare operand
    Mov Eax, 1D
    Mov Ebx, Addr str14                 ; assemble operand LITERAL
    Push Ebx                            ; Linked variable added to stack
    ; Caller save registers Ebx
    Push Ebx                            ; Anonymous value added to stack
    Push 0                              ; Anonymous value added to stack
    Push Addr tempGlobal                ; Anonymous value added to stack
    Push Eax                            ; Anonymous value added to stack
    Push Ebx                            ; Anonymous value added to stack
    Push [outputHandle]                 ; Anonymous value added to stack
    Call WriteConsoleA
    ; Caller restore registers Ebx
    Pop Ebx                             ; Anonymous value removed from stack
    
    ; Output
    ; Prepare operand
    Mov Eax, 4D
    Mov Ecx, -1D                        ; assemble operand LITERAL
    Push Ecx                            ; Linked variable added to stack
    ; Prepare operand
    Mov Eax, 4D
    Mov Edx, -2D                        ; assemble operand LITERAL
    Push Edx                            ; Linked variable added to stack
    Mov Esi, [Esp + 4]                  ; Retrieve value from stack
    Mov Edi, [Esp + 0]                  ; Retrieve value from stack
    Cmp Esi, Edi                        ; Prepare integer comparision
    Mov Ebx, 1
    Jne > label5
    Xor Ebx, Ebx
label5:
    
    Push Ebx                            ; Linked variable added to stack
    Cmp Ebx, 0                          ; Prepare boolean to string
    Jz > label6
    Mov [tempGlobal], Addr trueString
    Mov Eax, 4
    Jmp > label7
label6:
    Mov [tempGlobal], Addr falseString
    Mov Eax, 5
label7:
    ; Caller save registers Ebx
    Push Ebx                            ; Anonymous value added to stack
    Push 0                              ; Anonymous value added to stack
    Push Addr tempGlobal                ; Anonymous value added to stack
    Push Eax                            ; Anonymous value added to stack
    Push [tempGlobal]                   ; Anonymous value added to stack
    Push [outputHandle]                 ; Anonymous value added to stack
    Call WriteConsoleA
    ; Caller restore registers Ebx
    Pop Ebx                             ; Anonymous value removed from stack
    
    ; Output
    ; Prepare operand
    Mov Eax, 1D
    Mov Ecx, Addr str14                 ; assemble operand LITERAL
    Push Ecx                            ; Linked variable added to stack
    ; Caller save registers Ecx
    Push Ecx                            ; Anonymous value added to stack
    Push 0                              ; Anonymous value added to stack
    Push Addr tempGlobal                ; Anonymous value added to stack
    Push Eax                            ; Anonymous value added to stack
    Push Ecx                            ; Anonymous value added to stack
    Push [outputHandle]                 ; Anonymous value added to stack
    Call WriteConsoleA
    ; Caller restore registers Ecx
    Pop Ecx                             ; Anonymous value removed from stack
    
    ; Output
    ; Prepare operand
    Mov Eax, 4D
    Mov Edx, -1D                        ; assemble operand LITERAL
    Push Edx                            ; Linked variable added to stack
    ; Prepare operand
    Mov Eax, 4D
    Mov Esi, -2D                        ; assemble operand LITERAL
    Push Esi                            ; Linked variable added to stack
    Mov Edi, [Esp + 4]                  ; Retrieve value from stack
    Mov Ebx, [Esp + 0]                  ; Retrieve value from stack
    Cmp Edi, Ebx                        ; Prepare integer comparision
    Mov Ecx, 1
    Jl > label8
    Xor Ecx, Ecx
label8:
    
    Push Ecx                            ; Linked variable added to stack
    Cmp Ecx, 0                          ; Prepare boolean to string
    Jz > label9
    Mov [tempGlobal], Addr trueString
    Mov Eax, 4
    Jmp > label10
label9:
    Mov [tempGlobal], Addr falseString
    Mov Eax, 5
label10:
    ; Caller save registers Ecx
    Push Ecx                            ; Anonymous value added to stack
    Push 0                              ; Anonymous value added to stack
    Push Addr tempGlobal                ; Anonymous value added to stack
    Push Eax                            ; Anonymous value added to stack
    Push [tempGlobal]                   ; Anonymous value added to stack
    Push [outputHandle]                 ; Anonymous value added to stack
    Call WriteConsoleA
    ; Caller restore registers Ecx
    Pop Ecx                             ; Anonymous value removed from stack
    
    ; Output
    ; Prepare operand
    Mov Eax, 1D
    Mov Edx, Addr str14                 ; assemble operand LITERAL
    Push Edx                            ; Linked variable added to stack
    ; Caller save registers Edx
    Push Edx                            ; Anonymous value added to stack
    Push 0                              ; Anonymous value added to stack
    Push Addr tempGlobal                ; Anonymous value added to stack
    Push Eax                            ; Anonymous value added to stack
    Push Edx                            ; Anonymous value added to stack
    Push [outputHandle]                 ; Anonymous value added to stack
    Call WriteConsoleA
    ; Caller restore registers Edx
    Pop Edx                             ; Anonymous value removed from stack
    
    ; Output
    ; Prepare operand
    Mov Eax, 4D
    Mov Esi, -1D                        ; assemble operand LITERAL
    Push Esi                            ; Linked variable added to stack
    ; Prepare operand
    Mov Eax, 4D
    Mov Edi, -2D                        ; assemble operand LITERAL
    Push Edi                            ; Linked variable added to stack
    Mov Ebx, [Esp + 4]                  ; Retrieve value from stack
    Mov Ecx, [Esp + 0]                  ; Retrieve value from stack
    Cmp Ebx, Ecx                        ; Prepare integer comparision
    Mov Edx, 1
    Jle > label11
    Xor Edx, Edx
label11:
    
    Push Edx                            ; Linked variable added to stack
    Cmp Edx, 0                          ; Prepare boolean to string
    Jz > label12
    Mov [tempGlobal], Addr trueString
    Mov Eax, 4
    Jmp > label13
label12:
    Mov [tempGlobal], Addr falseString
    Mov Eax, 5
label13:
    ; Caller save registers Edx
    Push Edx                            ; Anonymous value added to stack
    Push 0                              ; Anonymous value added to stack
    Push Addr tempGlobal                ; Anonymous value added to stack
    Push Eax                            ; Anonymous value added to stack
    Push [tempGlobal]                   ; Anonymous value added to stack
    Push [outputHandle]                 ; Anonymous value added to stack
    Call WriteConsoleA
    ; Caller restore registers Edx
    Pop Edx                             ; Anonymous value removed from stack
    
    ; Output
    ; Prepare operand
    Mov Eax, 1D
    Mov Esi, Addr str14                 ; assemble operand LITERAL
    Push Esi                            ; Linked variable added to stack
    ; Caller save registers Esi
    Push Esi                            ; Anonymous value added to stack
    Push 0                              ; Anonymous value added to stack
    Push Addr tempGlobal                ; Anonymous value added to stack
    Push Eax                            ; Anonymous value added to stack
    Push Esi                            ; Anonymous value added to stack
    Push [outputHandle]                 ; Anonymous value added to stack
    Call WriteConsoleA
    ; Caller restore registers Esi
    Pop Esi                             ; Anonymous value removed from stack
    
    ; Output
    ; Prepare operand
    Mov Eax, 4D
    Mov Edi, -1D                        ; assemble operand LITERAL
    Push Edi                            ; Linked variable added to stack
    ; Prepare operand
    Mov Eax, 4D
    Mov Ebx, -2D                        ; assemble operand LITERAL
    Push Ebx                            ; Linked variable added to stack
    Mov Ecx, [Esp + 4]                  ; Retrieve value from stack
    Mov Edx, [Esp + 0]                  ; Retrieve value from stack
    Cmp Ecx, Edx                        ; Prepare integer comparision
    Mov Esi, 1
    Jg > label14
    Xor Esi, Esi
label14:
    
    Push Esi                            ; Linked variable added to stack
    Cmp Esi, 0                          ; Prepare boolean to string
    Jz > label15
    Mov [tempGlobal], Addr trueString
    Mov Eax, 4
    Jmp > label16
label15:
    Mov [tempGlobal], Addr falseString
    Mov Eax, 5
label16:
    ; Caller save registers Esi
    Push Esi                            ; Anonymous value added to stack
    Push 0                              ; Anonymous value added to stack
    Push Addr tempGlobal                ; Anonymous value added to stack
    Push Eax                            ; Anonymous value added to stack
    Push [tempGlobal]                   ; Anonymous value added to stack
    Push [outputHandle]                 ; Anonymous value added to stack
    Call WriteConsoleA
    ; Caller restore registers Esi
    Pop Esi                             ; Anonymous value removed from stack
    
    ; Output
    ; Prepare operand
    Mov Eax, 1D
    Mov Edi, Addr str14                 ; assemble operand LITERAL
    Push Edi                            ; Linked variable added to stack
    ; Caller save registers Edi
    Push Edi                            ; Anonymous value added to stack
    Push 0                              ; Anonymous value added to stack
    Push Addr tempGlobal                ; Anonymous value added to stack
    Push Eax                            ; Anonymous value added to stack
    Push Edi                            ; Anonymous value added to stack
    Push [outputHandle]                 ; Anonymous value added to stack
    Call WriteConsoleA
    ; Caller restore registers Edi
    Pop Edi                             ; Anonymous value removed from stack
    
    ; Output
    ; Prepare operand
    Mov Eax, 4D
    Mov Ebx, -1D                        ; assemble operand LITERAL
    Push Ebx                            ; Linked variable added to stack
    ; Prepare operand
    Mov Eax, 4D
    Mov Ecx, -2D                        ; assemble operand LITERAL
    Push Ecx                            ; Linked variable added to stack
    Mov Edx, [Esp + 4]                  ; Retrieve value from stack
    Mov Esi, [Esp + 0]                  ; Retrieve value from stack
    Cmp Edx, Esi                        ; Prepare integer comparision
    Mov Edi, 1
    Jge > label17
    Xor Edi, Edi
label17:
    
    Push Edi                            ; Linked variable added to stack
    Cmp Edi, 0                          ; Prepare boolean to string
    Jz > label18
    Mov [tempGlobal], Addr trueString
    Mov Eax, 4
    Jmp > label19
label18:
    Mov [tempGlobal], Addr falseString
    Mov Eax, 5
label19:
    ; Caller save registers Edi
    Push Edi                            ; Anonymous value added to stack
    Push 0                              ; Anonymous value added to stack
    Push Addr tempGlobal                ; Anonymous value added to stack
    Push Eax                            ; Anonymous value added to stack
    Push [tempGlobal]                   ; Anonymous value added to stack
    Push [outputHandle]                 ; Anonymous value added to stack
    Call WriteConsoleA
    ; Caller restore registers Edi
    Pop Edi                             ; Anonymous value removed from stack
    
    ; Output
    ; Prepare operand
    Mov Eax, 2D
    Mov Ebx, Addr str11                 ; assemble operand LITERAL
    Push Ebx                            ; Linked variable added to stack
    ; Caller save registers Ebx
    Push Ebx                            ; Anonymous value added to stack
    Push 0                              ; Anonymous value added to stack
    Push Addr tempGlobal                ; Anonymous value added to stack
    Push Eax                            ; Anonymous value added to stack
    Push Ebx                            ; Anonymous value added to stack
    Push [outputHandle]                 ; Anonymous value added to stack
    Call WriteConsoleA
    ; Caller restore registers Ebx
    Pop Ebx                             ; Anonymous value removed from stack
    
    ; Output
    ; Prepare operand
    Mov Eax, 33D
    Mov Ecx, Addr str15                 ; assemble operand LITERAL
    Push Ecx                            ; Linked variable added to stack
    ; Caller save registers Ecx
    Push Ecx                            ; Anonymous value added to stack
    Push 0                              ; Anonymous value added to stack
    Push Addr tempGlobal                ; Anonymous value added to stack
    Push Eax                            ; Anonymous value added to stack
    Push Ecx                            ; Anonymous value added to stack
    Push [outputHandle]                 ; Anonymous value added to stack
    Call WriteConsoleA
    ; Caller restore registers Ecx
    Pop Ecx                             ; Anonymous value removed from stack
    
    ; Output
    ; Prepare operand
    Mov Eax, 40D
    Mov Edx, Addr str16                 ; assemble operand LITERAL
    Push Edx                            ; Linked variable added to stack
    ; Caller save registers Edx
    Push Edx                            ; Anonymous value added to stack
    Push 0                              ; Anonymous value added to stack
    Push Addr tempGlobal                ; Anonymous value added to stack
    Push Eax                            ; Anonymous value added to stack
    Push Edx                            ; Anonymous value added to stack
    Push [outputHandle]                 ; Anonymous value added to stack
    Call WriteConsoleA
    ; Caller restore registers Edx
    Pop Edx                             ; Anonymous value removed from stack
    
    ; Output
    ; Prepare operand
    Mov Eax, 4D
    Mov Esi, 4D                         ; assemble operand LITERAL
    Push Esi                            ; Linked variable added to stack
    ; Prepare operand
    Mov Eax, 4D
    Mov Edi, 5D                         ; assemble operand LITERAL
    Push Edi                            ; Linked variable added to stack
    Mov Ebx, [Esp + 4]                  ; Retrieve value from stack
    Mov Ecx, [Esp + 0]                  ; Retrieve value from stack
    Cmp Ebx, Ecx                        ; Prepare integer comparision
    Mov Edx, 1
    Jge > label20
    Xor Edx, Edx
label20:
    
    Push Edx                            ; Linked variable added to stack
    ; Prepare operand
    Mov Eax, 4D
    Mov Esi, 6D                         ; assemble operand LITERAL
    Push Esi                            ; Linked variable added to stack
    ; Prepare operand
    Mov Eax, 4D
    Mov Edi, 7D                         ; assemble operand LITERAL
    Push Edi                            ; Linked variable added to stack
    ; Prepare operand
    Mov Eax, 4D
    Mov Ebx, 2D                         ; assemble operand LITERAL
    Push Ebx                            ; Linked variable added to stack
    Mov Ecx, [Esp + 4]                  ; Retrieve value from stack
    Mov Edx, [Esp + 0]                  ; Retrieve value from stack
    Mov Esi, Ecx                        ; Prepare integer subtraction
    Sub Esi, Edx
    
    Push Esi                            ; Linked variable added to stack
    Mov Edi, [Esp + 12]                 ; Retrieve value from stack
    Mov Ebx, [Esp + 0]                  ; Retrieve value from stack
    Cmp Edi, Ebx                        ; Prepare integer comparision
    Mov Ecx, 1
    Jl > label21
    Xor Ecx, Ecx
label21:
    
    Push Ecx                            ; Linked variable added to stack
    Mov Edx, [Esp + 20]                 ; Retrieve value from stack
    Mov Esi, [Esp + 0]                  ; Retrieve value from stack
    Mov Edi, Edx                        ; Prepare AND operation
    And Edi, Esi                        ; Execute Edx AND Esi
    
    Push Edi                            ; Linked variable added to stack
    ; Prepare operand
    Mov Eax, 1D
    Mov Ebx, 1                          ; assemble operand TRUE
    Push Ebx                            ; Linked variable added to stack
    Mov Ecx, [Esp + 4]                  ; Retrieve value from stack
    Mov Edx, [Esp + 0]                  ; Retrieve value from stack
    Mov Esi, Ecx                        ; Prepare AND operation
    And Esi, Edx                        ; Execute Ecx AND Edx
    
    Push Esi                            ; Linked variable added to stack
    ; Prepare operand
    Mov Eax, 1D
    Mov Edi, 0                          ; assemble operand FALSE
    Push Edi                            ; Linked variable added to stack
    Mov Ebx, [Esp + 0]                  ; Retrieve value from stack
    NOT Ebx                             ; Execute Not Ebx
    
    Push Ebx                            ; Linked variable added to stack
    Mov Ecx, [Esp + 8]                  ; Retrieve value from stack
    Mov Edx, [Esp + 0]                  ; Retrieve value from stack
    Mov Esi, Ecx                        ; Prepare OR operation
    Or Esi, Edx                         ; Execute Ecx OR Edx
    
    Push Esi                            ; Linked variable added to stack
    Cmp Esi, 0                          ; Prepare boolean to string
    Jz > label22
    Mov [tempGlobal], Addr trueString
    Mov Eax, 4
    Jmp > label23
label22:
    Mov [tempGlobal], Addr falseString
    Mov Eax, 5
label23:
    ; Caller save registers Esi
    Push Esi                            ; Anonymous value added to stack
    Push 0                              ; Anonymous value added to stack
    Push Addr tempGlobal                ; Anonymous value added to stack
    Push Eax                            ; Anonymous value added to stack
    Push [tempGlobal]                   ; Anonymous value added to stack
    Push [outputHandle]                 ; Anonymous value added to stack
    Call WriteConsoleA
    ; Caller restore registers Esi
    Pop Esi                             ; Anonymous value removed from stack
    
    ; Output
    ; Prepare operand
    Mov Eax, 2D
    Mov Edi, Addr str11                 ; assemble operand LITERAL
    Push Edi                            ; Linked variable added to stack
    ; Caller save registers Edi
    Push Edi                            ; Anonymous value added to stack
    Push 0                              ; Anonymous value added to stack
    Push Addr tempGlobal                ; Anonymous value added to stack
    Push Eax                            ; Anonymous value added to stack
    Push Edi                            ; Anonymous value added to stack
    Push [outputHandle]                 ; Anonymous value added to stack
    Call WriteConsoleA
    ; Caller restore registers Edi
    Pop Edi                             ; Anonymous value removed from stack
    
    ; Output
    ; Prepare operand
    Mov Eax, 30D
    Mov Ebx, Addr str17                 ; assemble operand LITERAL
    Push Ebx                            ; Linked variable added to stack
    ; Caller save registers Ebx
    Push Ebx                            ; Anonymous value added to stack
    Push 0                              ; Anonymous value added to stack
    Push Addr tempGlobal                ; Anonymous value added to stack
    Push Eax                            ; Anonymous value added to stack
    Push Ebx                            ; Anonymous value added to stack
    Push [outputHandle]                 ; Anonymous value added to stack
    Call WriteConsoleA
    ; Caller restore registers Ebx
    Pop Ebx                             ; Anonymous value removed from stack
    
    ; Output
    ; Prepare operand
    Mov Eax, 18D
    Mov Ecx, Addr str18                 ; assemble operand LITERAL
    Push Ecx                            ; Linked variable added to stack
    ; Caller save registers Ecx
    Push Ecx                            ; Anonymous value added to stack
    Push 0                              ; Anonymous value added to stack
    Push Addr tempGlobal                ; Anonymous value added to stack
    Push Eax                            ; Anonymous value added to stack
    Push Ecx                            ; Anonymous value added to stack
    Push [outputHandle]                 ; Anonymous value added to stack
    Call WriteConsoleA
    ; Caller restore registers Ecx
    Pop Ecx                             ; Anonymous value removed from stack
    
    ; Output
    ; Prepare operand
    Mov Eax, 3D
    Mov Edx, Addr str19                 ; assemble operand LITERAL
    Push Edx                            ; Linked variable added to stack
    ; Prepare operand
    Mov Eax, 3D
    Mov Esi, Addr str20                 ; assemble operand LITERAL
    Push Esi                            ; Linked variable added to stack
    Mov Edi, [Esp + 4]                  ; Retrieve value from stack
    Mov Ebx, [Esp + 0]                  ; Retrieve value from stack
    Push Edi                            ; Anonymous value added to stack
    Push Ebx                            ; Anonymous value added to stack
    Call string_compare
    Mov Ecx, Eax
    
    Push Ecx                            ; Linked variable added to stack
    Cmp Ecx, 0                          ; Prepare boolean to string
    Jz > label24
    Mov [tempGlobal], Addr trueString
    Mov Eax, 4
    Jmp > label25
label24:
    Mov [tempGlobal], Addr falseString
    Mov Eax, 5
label25:
    ; Caller save registers Ecx
    Push Ecx                            ; Anonymous value added to stack
    Push 0                              ; Anonymous value added to stack
    Push Addr tempGlobal                ; Anonymous value added to stack
    Push Eax                            ; Anonymous value added to stack
    Push [tempGlobal]                   ; Anonymous value added to stack
    Push [outputHandle]                 ; Anonymous value added to stack
    Call WriteConsoleA
    ; Caller restore registers Ecx
    Pop Ecx                             ; Anonymous value removed from stack
    
    ; Output
    ; Prepare operand
    Mov Eax, 18D
    Mov Edx, Addr str21                 ; assemble operand LITERAL
    Push Edx                            ; Linked variable added to stack
    ; Caller save registers Edx
    Push Edx                            ; Anonymous value added to stack
    Push 0                              ; Anonymous value added to stack
    Push Addr tempGlobal                ; Anonymous value added to stack
    Push Eax                            ; Anonymous value added to stack
    Push Edx                            ; Anonymous value added to stack
    Push [outputHandle]                 ; Anonymous value added to stack
    Call WriteConsoleA
    ; Caller restore registers Edx
    Pop Edx                             ; Anonymous value removed from stack
    
    ; Output
    ; Prepare operand
    Mov Eax, 3D
    Mov Esi, Addr str19                 ; assemble operand LITERAL
    Push Esi                            ; Linked variable added to stack
    ; Prepare operand
    Mov Eax, 3D
    Mov Edi, Addr str20                 ; assemble operand LITERAL
    Push Edi                            ; Linked variable added to stack
    Mov Ebx, [Esp + 4]                  ; Retrieve value from stack
    Mov Ecx, [Esp + 0]                  ; Retrieve value from stack
    Push Ebx                            ; Anonymous value added to stack
    Push Ecx                            ; Anonymous value added to stack
    Call string_compare
    Mov Edx, Eax
    Not Edx                             ; Invert bit 0 on boolean value
    Shl Edx, 31D
    Shr Edx, 31D
    
    Push Edx                            ; Linked variable added to stack
    Cmp Edx, 0                          ; Prepare boolean to string
    Jz > label26
    Mov [tempGlobal], Addr trueString
    Mov Eax, 4
    Jmp > label27
label26:
    Mov [tempGlobal], Addr falseString
    Mov Eax, 5
label27:
    ; Caller save registers Edx
    Push Edx                            ; Anonymous value added to stack
    Push 0                              ; Anonymous value added to stack
    Push Addr tempGlobal                ; Anonymous value added to stack
    Push Eax                            ; Anonymous value added to stack
    Push [tempGlobal]                   ; Anonymous value added to stack
    Push [outputHandle]                 ; Anonymous value added to stack
    Call WriteConsoleA
    ; Caller restore registers Edx
    Pop Edx                             ; Anonymous value removed from stack
    
    ; Output
    ; Prepare operand
    Mov Eax, 18D
    Mov Esi, Addr str22                 ; assemble operand LITERAL
    Push Esi                            ; Linked variable added to stack
    ; Caller save registers Esi
    Push Esi                            ; Anonymous value added to stack
    Push 0                              ; Anonymous value added to stack
    Push Addr tempGlobal                ; Anonymous value added to stack
    Push Eax                            ; Anonymous value added to stack
    Push Esi                            ; Anonymous value added to stack
    Push [outputHandle]                 ; Anonymous value added to stack
    Call WriteConsoleA
    ; Caller restore registers Esi
    Pop Esi                             ; Anonymous value removed from stack
    
    ; Output
    ; Prepare operand
    Mov Eax, 3D
    Mov Edi, Addr str19                 ; assemble operand LITERAL
    Push Edi                            ; Linked variable added to stack
    ; Prepare operand
    Mov Eax, 3D
    Mov Ebx, Addr str19                 ; assemble operand LITERAL
    Push Ebx                            ; Linked variable added to stack
    Mov Ecx, [Esp + 4]                  ; Retrieve value from stack
    Mov Edx, [Esp + 0]                  ; Retrieve value from stack
    Push Ecx                            ; Anonymous value added to stack
    Push Edx                            ; Anonymous value added to stack
    Call string_compare
    Mov Esi, Eax
    
    Push Esi                            ; Linked variable added to stack
    Cmp Esi, 0                          ; Prepare boolean to string
    Jz > label28
    Mov [tempGlobal], Addr trueString
    Mov Eax, 4
    Jmp > label29
label28:
    Mov [tempGlobal], Addr falseString
    Mov Eax, 5
label29:
    ; Caller save registers Esi
    Push Esi                            ; Anonymous value added to stack
    Push 0                              ; Anonymous value added to stack
    Push Addr tempGlobal                ; Anonymous value added to stack
    Push Eax                            ; Anonymous value added to stack
    Push [tempGlobal]                   ; Anonymous value added to stack
    Push [outputHandle]                 ; Anonymous value added to stack
    Call WriteConsoleA
    ; Caller restore registers Esi
    Pop Esi                             ; Anonymous value removed from stack
    
    ; Output
    ; Prepare operand
    Mov Eax, 18D
    Mov Edi, Addr str23                 ; assemble operand LITERAL
    Push Edi                            ; Linked variable added to stack
    ; Caller save registers Edi
    Push Edi                            ; Anonymous value added to stack
    Push 0                              ; Anonymous value added to stack
    Push Addr tempGlobal                ; Anonymous value added to stack
    Push Eax                            ; Anonymous value added to stack
    Push Edi                            ; Anonymous value added to stack
    Push [outputHandle]                 ; Anonymous value added to stack
    Call WriteConsoleA
    ; Caller restore registers Edi
    Pop Edi                             ; Anonymous value removed from stack
    
    ; Output
    ; Prepare operand
    Mov Eax, 1D
    Mov Ebx, Addr str24                 ; assemble operand LITERAL
    Push Ebx                            ; Linked variable added to stack
    ; Prepare operand
    Mov Eax, 3D
    Mov Ecx, Addr str19                 ; assemble operand LITERAL
    Push Ecx                            ; Linked variable added to stack
    Mov Edx, [Esp + 4]                  ; Retrieve value from stack
    Mov Esi, [Esp + 0]                  ; Retrieve value from stack
    Push Edx                            ; Anonymous value added to stack
    Push Esi                            ; Anonymous value added to stack
    Call string_compare
    Mov Edi, Eax
    
    Push Edi                            ; Linked variable added to stack
    Cmp Edi, 0                          ; Prepare boolean to string
    Jz > label30
    Mov [tempGlobal], Addr trueString
    Mov Eax, 4
    Jmp > label31
label30:
    Mov [tempGlobal], Addr falseString
    Mov Eax, 5
label31:
    ; Caller save registers Edi
    Push Edi                            ; Anonymous value added to stack
    Push 0                              ; Anonymous value added to stack
    Push Addr tempGlobal                ; Anonymous value added to stack
    Push Eax                            ; Anonymous value added to stack
    Push [tempGlobal]                   ; Anonymous value added to stack
    Push [outputHandle]                 ; Anonymous value added to stack
    Call WriteConsoleA
    ; Caller restore registers Edi
    Pop Edi                             ; Anonymous value removed from stack
    
    ; Output
    ; Prepare operand
    Mov Eax, 18D
    Mov Ebx, Addr str25                 ; assemble operand LITERAL
    Push Ebx                            ; Linked variable added to stack
    ; Caller save registers Ebx
    Push Ebx                            ; Anonymous value added to stack
    Push 0                              ; Anonymous value added to stack
    Push Addr tempGlobal                ; Anonymous value added to stack
    Push Eax                            ; Anonymous value added to stack
    Push Ebx                            ; Anonymous value added to stack
    Push [outputHandle]                 ; Anonymous value added to stack
    Call WriteConsoleA
    ; Caller restore registers Ebx
    Pop Ebx                             ; Anonymous value removed from stack
    
    ; Output
    ; Prepare operand
    Mov Eax, 1D
    Mov Ecx, Addr str24                 ; assemble operand LITERAL
    Push Ecx                            ; Linked variable added to stack
    ; Prepare operand
    Mov Eax, 3D
    Mov Edx, Addr str19                 ; assemble operand LITERAL
    Push Edx                            ; Linked variable added to stack
    Mov Esi, [Esp + 4]                  ; Retrieve value from stack
    Mov Edi, [Esp + 0]                  ; Retrieve value from stack
    Push Esi                            ; Anonymous value added to stack
    Push Edi                            ; Anonymous value added to stack
    Call string_compare
    Mov Ebx, Eax
    
    Push Ebx                            ; Linked variable added to stack
    Cmp Ebx, 0                          ; Prepare boolean to string
    Jz > label32
    Mov [tempGlobal], Addr trueString
    Mov Eax, 4
    Jmp > label33
label32:
    Mov [tempGlobal], Addr falseString
    Mov Eax, 5
label33:
    ; Caller save registers Ebx
    Push Ebx                            ; Anonymous value added to stack
    Push 0                              ; Anonymous value added to stack
    Push Addr tempGlobal                ; Anonymous value added to stack
    Push Eax                            ; Anonymous value added to stack
    Push [tempGlobal]                   ; Anonymous value added to stack
    Push [outputHandle]                 ; Anonymous value added to stack
    Call WriteConsoleA
    ; Caller restore registers Ebx
    Pop Ebx                             ; Anonymous value removed from stack
    
    ; Output
    ; Prepare operand
    Mov Eax, 1D
    Mov Ecx, Addr str14                 ; assemble operand LITERAL
    Push Ecx                            ; Linked variable added to stack
    ; Caller save registers Ecx
    Push Ecx                            ; Anonymous value added to stack
    Push 0                              ; Anonymous value added to stack
    Push Addr tempGlobal                ; Anonymous value added to stack
    Push Eax                            ; Anonymous value added to stack
    Push Ecx                            ; Anonymous value added to stack
    Push [outputHandle]                 ; Anonymous value added to stack
    Call WriteConsoleA
    ; Caller restore registers Ecx
    Pop Ecx                             ; Anonymous value removed from stack
    
    Push [Esp + 308]                    ; Anonymous value added to stack
    Push [heapHandle]                   ; Anonymous value added to stack
    Call free_heap_allocations
    Add Esp, 316                        ; Close scope
    
    Ret                                 ; Program finish
    


;;;;;;; INCLUDED FILE get_string_length.asm ;;;;;;;;


get_string_length:
	Push Ebp
	Mov Ebp, Esp
	Add Ebp, 8				; Single parameter at [Esp]
	
	Xor Eax, Eax			; Stores total number of characters

	Mov Ecx, [Ebp]			; Character position in string
							; Loop until this is == \0

.loop:
	Cmp B[Ecx], 0			; Value at storage location == \0?
	Je > .next

	Add Eax, 1				; num digits += 1
	Add Ecx, 1				; next address at +4 bytes

	Jmp < .loop

.next:
	Pop Ebp					; original base pointer
	Pop Edx					; this return address
	Add Esp, 4				; consume parameter
	Push Edx

	Ret						; total # digits in Eax

;;;;;;; INCLUDED FILE add_heap_allocation.asm ;;;;;;;;


add_heap_allocation:
	Push Ebp			; Realign base address to first parameter
	Mov Ebp, Esp
	Add Ebp, 8
	
	Push Ebx			; Callee saved
	
						; [Ebp]: Heap handle
						; [Ebp + 4]: Address of heap allocation pool
						; W[[Ebp + 4]]: Number of allocations
						; W[[Ebp + 4] + 2]: Allocation capacity
						; D[[Ebp + 4] + 4 * n]: Allocation n
						; [Ebp + 8]: Number of bytes requested
						
	Mov Ebx, [Ebp + 4]	; Address of heap allocation pool
	Add W[Ebx], 1		; D[Ebx]: High: Number of allocations, Low: Allocation capacity
	Mov Edx, D[Ebx]		; Pull to registers
	
	Cmp Dl, Dh
	Jl > .fail			; Not enough capacity for addition
	
.capable
	Push [Ebp + 8]		; Number of bytes required
	Push 0				; Flags
	Push [Ebp]			; Heap handle
	Call HeapAlloc
	; Newly allocated address in Eax
	Cmp Eax, 0
	Je > .fail
	
	; Add allocated address to heap allocation pool
	; Ebx should have persisted through HeapAlloc
	Xor Edx, Edx
	Mov Dx, W[Ebx]		; Number of allocations, @ first two bytes of heap allocation pool
	IMul Edx, 4D		; Address width, 4 bytes
	Add Edx, [Ebp + 4]	; Address of heap allocation pool
	
	Mov [Edx], Eax		; Newly allocated address to heap allocation pool

	Jmp > .finally

.fail:
	Mov Eax, 0			; Not enough space in heap allocation pool

.finally:
	Pop Ebx				; Restore callee saved
	
	Pop Ebp				; Original base pointer
	Pop Edx				; This procedure's return address
	
	Add Esp, 12D		; Consume parameters
	
	Push Edx			; Restore this procedure's return address
	
	Ret
	

;;;;;;; INCLUDED FILE move_memory.asm ;;;;;;;;


move_memory:
	Push Ebp
	Mov Ebp, Esp
	Add Ebp, 8			; [Ebp + 0] == fromAddress itself
						; [Ebp + 4] == location with toAddress
						; [Ebp + 8] == number of bytes to transfer
						
	Push Ebx			; Callee saved
	
	Mov Eax, [Ebp + 4]	; Location with to address
	Mov Edx, [Ebp + 0]	; Location with from address
	
	Xor Ecx, Ecx
	
.loop:
	Cmp Ecx, [Ebp + 8]
	Jz > .next
	
	Mov Bl, B[Edx]		; Get value of "from" byte
	Mov B[Eax], Bl		; Move value to "to" byte
	
	Add Eax, 1			; Increment "to" byte address
	Add Edx, 1			; Increment "from" byte address
	
	Add Ecx, 1			; Increment iteratation variable
	
	Jmp < .loop

.next:
	Pop Ebx				; Restore callee saved registers
	
	Pop Ebp				; Actual base pointer
	Pop Edx				; This procedure's return location
	Add Esp, 12D		; Consume parameters
	
	Push Edx
	
	Ret

;;;;;;; INCLUDED FILE free_heap_allocations.asm ;;;;;;;;


free_heap_allocations:
	Push Ebp			; Realign base address to first parameter
	Mov Ebp, Esp
	Add Ebp, 8
	
	Push Ebx			; Callee saved
	
	
						; [Ebp]: Heap handle
						; [Ebp + 4]: Address of heap allocation pool
						; W[[Ebp + 4]]: Number of allocations
						; W[[Ebp + 4] + 2]: Allocation capacity
						; D[[Ebp + 4] + 4 * n]: Allocation n
						
	Mov Ebx, [Ebp + 4]	; Address of heap allocation pool
	Xor Cx, Cx
	
	Xor Edx, Edx
	Mov Dx, W[Ebx]		; Number of allocations
	Add Ebx, 4			; First allocation address
	
.loop:
	Cmp Cx, Dx
	Jz > .next
	
	Push Ecx, Edx		; Save local vars
	
	Push [Ebx]			; This allocation address
	Push 0				; Flags
	Push [Ebp]			; Heap handle
	Call HeapFree
	
	Pop Edx, Ecx		; Recall local vars
	
	Add Ebx, 4
	Add Cx, 1

	Jmp < .loop

.next:
	Push [Ebp + 4]		; Free heap pool itself
	Push 0				; Flags
	Push [Ebp]			; Heap handle
	Call HeapFree
	
	Mov Eax, 1

.finally:
	Pop Ebx				; Restore callee saved
	
	Pop Ebp				; Original base pointer
	Pop Edx				; This procedure's return address
	
	Add Esp, 8			; Consume parameters
	
	Push Edx
	
	Ret
	

;;;;;;; INCLUDED FILE clear_global_string.asm ;;;;;;;;


clear_global_string:
	Push Ebp
	Mov Ebp, Esp
	Add Ebp, 8			; Skip old Ebp and Return address
	
						; Param 1 [Ebp + 0 ]: Data location
						; Param 2 [Ebp + 4 ]: Number of bytes to set to 0
	
	Mov Eax, [Ebp]
	Mov Ecx, 0
	Mov Edx, [Ebp + 4]
	
clear_global_string_loop:
	Cmp Ecx, Edx
	Jz > clear_global_string_next
	
	Mov B[Eax], 0
	Add Eax, 4
	Add Ecx, 1
	
	Jmp < clear_global_string_loop

clear_global_string_next:
	Pop Ebp				; Original base pointer
	Pop Ecx				; Return address
	Add Esp, 8			; Consume parameters
	Push Ecx			; Return address belongs in first position in stack
	
	Ret

;;;;;;; INCLUDED FILE int_to_string.asm ;;;;;;;;


int_to_string:
	; loop through bits of number from least sig to most sig
	; convert digit to character (+ 0x30)
	; place at end of result location

	Push Ebp
	Mov Ebp, Esp
	Add Ebp, 8				; skip return address
							; [ebp] 	first arg 	== number
							; [ebp+4] 	second arg 	== address of data location to store string (e.g. 11 bytes)
							; [ebp+8] 	third arg 	== # of digits to convert at data location sign (e.g. 11)


	Mov Eax, [Ebp]			; number to convert
	Cmp Eax, 0
	Jge > int_to_string_pos

	; store sign for later	; [esp + 4]
int_to_string_neg:
	Push 1   				; negative
	Not Eax
	Add Eax, 1				; invert eax
	Mov [Ebp], Eax			; save as POSTIVE number
							; already have negative sign character
	Jmp int_to_string_signfin

int_to_string_pos:
	Push 0 					; positive
	

int_to_string_signfin:
	Mov Eax, [Ebp + 8]		; # total characters to print, exclusive
	Sub Eax, 1				; inclusive
	Add Eax, [Ebp + 4]		; inclusive last character position
	Push Eax				; [esp] = ptr to highest unused character position

	Mov Eax, [Ebp]			; number to convert

	Xor Ecx, Ecx
	Sub Ecx, 1				; i = -1

int_to_string_loop:
	Add Ecx, 1
	Cmp Ecx, [Ebp + 8]		; for i = 0 to 10
	Jz > int_to_string_addsign

	Mov Ebx, 10D			; divisor
	Xor Edx, Edx			; need to clear remainder before divide
	Mov Esi, [Esp + 4]		; 1==neg, 0==pos
	Cmp Esi, 0
	Je > int_to_string_skipsign
	Cdq						; sign extend into edx
int_to_string_skipsign:
	IDiv Ebx				; result number to eax
							; remainder digit in edx
	Add Edx, 0X30			; convert to ascii digit

	Mov Ebx, [Esp]			; address of last character position
	Mov B[Ebx], Dl			; store digit (low byte) in last character position

	Cmp Eax, 0				; are the remaining digits all 0?
	Jz > int_to_string_addsign			; then have done all of the characters we can

	Sub D[Esp], 1			; decrement last character position by 1 byte

	Jmp < int_to_string_loop	; iterate

int_to_string_addsign:
							; make room for sign
	Sub D[Esp], 1			; character left of last output
	Mov Ebx, [Esp]			; ptr to ptr. Dereference once

	Mov Eax, [Esp + 4D]		; 0==pos, 1==neg
	Cmp Eax, 0
	Je > int_to_string_final

	Mov B[Ebx], 0X2D		; add sign at beg of string
	Add Ecx, 1				; indicate length of string has increased by 1

int_to_string_final:
	Add Esp, 8				; last character position, sign character
	Pop Ebp					; restore base pointer

	Pop Ebx					; Return address
	Add Esp, 12				; Consume parameters
	Push Ebx				; Put return address back into the stack

	Mov Eax, Ecx			; actual length - 1
	Add Eax, 1

	Ret

;;;;;;; INCLUDED FILE string_compare.asm ;;;;;;;;


string_compare:
	; parameters:
	;		string 1 address (string ends in \0)
	;		strign 2 address (string ends in \0)
	Push Ebp
	Mov Ebp, Esp
	Add Ebp, 8
	
	Mov Ecx, [Ebp]			; string 1 address
	Mov Edx, [Ebp + 4]		; string 2 address
	
.loop:
	Mov Al, B[Ecx]			; actual value of string 1 byte
	Cmp Al, B[Edx]			; actual value of string 2 byte
	Jne > .not_equivalent
	
	Cmp Eax, 0
	Je > .equivalent
	
	Add Ecx, 1				; increment bytes
	Add Edx, 1
	
	Jmp < .loop

.not_equivalent:
	Xor Eax, Eax
	Jmp > .finally
	
.equivalent:
	Mov Eax, 1
	
.finally:
	Pop Ebp					; original base pointer
	Pop Ecx					; this procedure's return address
	
	Add Esp, 8				; consume parameters
	Push Ecx
	
	Ret