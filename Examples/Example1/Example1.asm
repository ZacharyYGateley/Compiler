; This code generated by com.zygateley.compiler

Data Section
    str0	DB	"If",0,""
    str1	DB	" I",0,""
    str2	DB	" had a millon dolla",0,""
    heapHandle	DD	0
    inputHandle	DD	0
    outputHandle	DD	0
    tempGlobal	DD	64 Dup 0

Code Section
start:
    ; Prepare environment for input and output
    ; Get process heap handle
    Call GetProcessHeap
    Mov [heapHandle], Eax               ; Save heap handle
    ; Get input handle
    Push -10D                           ; Parameter for GetStdHandle
    Call GetStdHandle
    Mov [inputHandle], Eax              ; Save input handle
    ; Get output handle
    Push -11D                           ; Parameter for GetStdHandle
    Call GetStdHandle
    Mov [outputHandle], Eax             ; Save output handle
    
    Sub Esp, 4                          ; Open scope
    ; Store value to b
    Mov Ebx, 0                          ; Clear register for new usage
    ; Prepare operand
    Mov Ecx, 0                          ; Clear register for new usage
    Mov Eax, 2D
    Mov Ecx, Addr str0                  ; assemble operand LITERAL
    Push Ecx                            ; Linked variable added to stack
    ; Prepare operand
    Mov Edx, 0                          ; Clear register for new usage
    Mov Eax, 2D
    Mov Edx, Addr str1                  ; assemble operand LITERAL
    Push Edx                            ; Linked variable added to stack
    ; Caller save registers
    Push Ebx                            ; Anonymous value added to stack
    Push [Esp + 8D]                     ; Parameter for get_string_length
    Call get_string_length
    Mov [tempGlobal], Eax
    Push [Esp + 4D]                     ; Parameter for get_string_length
    Call get_string_length
    Mov [tempGlobal + 4], Eax
    Add Eax, [Esp + 4]                  ; Sum string lengths
    ; Caller save registers
    Push Ebx                            ; Anonymous value added to stack
    Push Eax                            ; Parameter for HeapAlloc
    Push 0                              ; Parameter for HeapAlloc
    Push [heapHandle]                   ; Parameter for HeapAlloc
    Call HeapAlloc
    ; Caller restore registers
    Pop Ebx                             ; Anonymous value removed from stack
    Mov [tempGlobal + 8], Eax           ; Remember value in temp global
    ; Caller restore registers
    Pop Ebx                             ; Anonymous value removed from stack
    Mov Esi, 0                          ; Clear register for new usage
    Mov Esi, [Esp + 4D]
    ; Caller save registers
    Push Ebx                            ; Anonymous value added to stack
    Push Esi                            ; Anonymous value added to stack
    Push [tempGlobal]                   ; Parameter for move_memory
    Push Eax                            ; Parameter for move_memory
    Push Esi                            ; Parameter for move_memory
    Call move_memory
    ; Caller restore registers
    Pop Esi                             ; Anonymous value removed from stack
    Pop Ebx                             ; Anonymous value removed from stack
    Mov Esi, [Esp + 0D]
    ; Caller save registers
    Push Esi                            ; Anonymous value added to stack
    Push Ebx                            ; Anonymous value added to stack
    Push [tempGlobal + 4]               ; Parameter for move_memory
    Push Eax                            ; Parameter for move_memory
    Push Esi                            ; Parameter for move_memory
    Call move_memory
    ; Caller restore registers
    Pop Ebx                             ; Anonymous value removed from stack
    Pop Esi                             ; Anonymous value removed from stack
    Mov B[Eax], 0                       ; Strings must end in 0
    Mov Edi, 0                          ; Clear register for new usage
    Mov Edi, [tempGlobal + 8]           ; Move new string location to newly allocated register
    Mov Eax, [tempGlobal]
    Add Eax, [tempGlobal + 4]           ; Store string length in Eax
    
    Mov [Esp + 8D], Edi                 ; Store value to variable
    
    ; Output
    ; Prepare operand
    Mov Ecx, 0                          ; Clear register for new usage
    ; Caller save registers
    Push Ecx                            ; Anonymous value added to stack
    Push [Esp + 12D]                    ; Parameter for get_string_length
    Call get_string_length
    ; Caller restore registers
    Pop Ecx                             ; Anonymous value removed from stack
    Mov Ecx, [Esp + 8D]                 ; assemble operand VARIABLE
    ; Prepare operand
    Mov Edx, 0                          ; Clear register for new usage
    Mov Eax, 19D
    Mov Edx, Addr str2                  ; assemble operand LITERAL
    Push Edx                            ; Linked variable added to stack
    Push [Esp + 12D]                    ; Parameter for get_string_length
    Call get_string_length
    Mov [tempGlobal], Eax
    Push [Esp + 0D]                     ; Parameter for get_string_length
    Call get_string_length
    Mov [tempGlobal + 4], Eax
    Add Eax, [Esp + 4]                  ; Sum string lengths
    Push Eax                            ; Parameter for HeapAlloc
    Push 0                              ; Parameter for HeapAlloc
    Push [heapHandle]                   ; Parameter for HeapAlloc
    Call HeapAlloc
    Mov [tempGlobal + 8], Eax           ; Remember value in temp global
    Mov Ebx, 0                          ; Clear register for new usage
    Mov Ebx, [Esp + 12D]
    ; Caller save registers
    Push Ebx                            ; Anonymous value added to stack
    Push [tempGlobal]                   ; Parameter for move_memory
    Push Eax                            ; Parameter for move_memory
    Push Ebx                            ; Parameter for move_memory
    Call move_memory
    ; Caller restore registers
    Pop Ebx                             ; Anonymous value removed from stack
    Mov Ebx, [Esp + 0D]
    ; Caller save registers
    Push Ebx                            ; Anonymous value added to stack
    Push [tempGlobal + 4]               ; Parameter for move_memory
    Push Eax                            ; Parameter for move_memory
    Push Ebx                            ; Parameter for move_memory
    Call move_memory
    ; Caller restore registers
    Pop Ebx                             ; Anonymous value removed from stack
    Mov B[Eax], 0                       ; Strings must end in 0
    Mov Esi, 0                          ; Clear register for new usage
    Mov Esi, [tempGlobal + 8]           ; Move new string location to newly allocated register
    Mov Eax, [tempGlobal]
    Add Eax, [tempGlobal + 4]           ; Store string length in Eax
    
    ; Caller save registers
    Push Esi                            ; Anonymous value added to stack
    Push 0                              ; Parameter for WriteConsoleA
    Push Addr tempGlobal                ; Parameter for WriteConsoleA
    Push Eax                            ; Parameter for WriteConsoleA
    Push Esi                            ; Parameter for WriteConsoleA
    Push [outputHandle]                 ; Parameter for WriteConsoleA
    Call WriteConsoleA
    ; Caller restore registers
    Pop Esi                             ; Anonymous value removed from stack
    
    Add Esp, 16                         ; Close scope
    
    Ret                                 ; Program finish
    


;;;;;;; INCLUDED FILE get_string_length.asm ;;;;;;;;


get_string_length:
	Push Ebp
	Mov Ebp, Esp
	Add Ebp, 8				; Single parameter at [Esp]
	
	Xor Eax, Eax			; Stores total number of characters

	Mov Ecx, [Ebp]			; Character position in string
							; Loop until this is == \0

.loop:
	Cmp B[Ecx], 0			; Value at storage location == \0?
	Je > .next

	Add Eax, 1				; num digits += 1
	Add Ecx, 1				; next address at +4 bytes

	Jmp < .loop

.next:
	Pop Ebp					; original base pointer
	Pop Edx					; this return address
	Add Esp, 4				; consume parameter
	Push Edx

	Ret						; total # digits in Eax

;;;;;;; INCLUDED FILE move_memory.asm ;;;;;;;;


move_memory:
	Push Ebp
	Mov Ebp, Esp
	Add Ebp, 8			; [Ebp + 0] == fromAddress itself
						; [Ebp + 4] == location with toAddress
						; [Ebp + 8] == number of bytes to transfer
						
	Push Ebx			; Callee saved
	
	Mov Eax, [Ebp + 4]	; Location with to address
	Mov Edx, [Ebp + 0]	; Location with from address
	
	Xor Ecx, Ecx
	
.loop:
	Cmp Ecx, [Ebp + 8]
	Jz > .next
	
	Mov Bl, B[Edx]		; Get value of "from" byte
	Mov B[Eax], Bl		; Move value to "to" byte
	
	Add Eax, 1			; Increment "to" byte address
	Add Edx, 1			; Increment "from" byte address
	
	Add Ecx, 1			; Increment iteratation variable
	
	Jmp < .loop

.next:
	Pop Ebx				; Restore callee saved registers
	
	Pop Ebp				; Actual base pointer
	Pop Edx				; This procedure's return location
	Add Esp, 12D		; Consume parameters
	
	Push Edx
	
	Ret