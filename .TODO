Output to assembly
	Aliases and pulling/pushing from stack only when necessary
Python translator
	"currentIndent" --> "Depth"

Build basic README. Make repository public.
OPTIMIZATION.md

Token
	NonTerminal constructors should take CFGPattern and PrecedencePattern as parameters  
		Can make firstTerminalsAndPatterns and follow do the work of the 	NonTerminal constructor?
		Make Token prettier :'-(
	Should be Token, not Terminal or NonTerminal:
		element type
		Terminal only:
			exactString, element type, etc

unary ! double parses on expression operand

Language additions
	Loops
	var initialization? e.g. "var b;"

Long term
	Loops
	Scope? Ought to come naturally in assembly. In Python... not so much.
	Type checking for addition - Adding strings - Subtracting strings...? i.e. type checking
	Token extends BasicToken for grammar selection
		Can auto-build Token.java based on some grammar input?
		Combine backend functions into NonTerminal rule declarations? if possible and is clean
	TokenStream rightIndex should be inclusive?
	Make traversing parseTree more data hidden
	SymbolTable types are a little strange.
	wait command? on any key press
