Bugs
	unary "!" double parses on expression operand

Output to assembly
	I am not following push/pop and Scope.stack well enough?
	Aliases and pulling/pushing from stack only when necessary
	On the fly type checker
		assembleGlobalString boolean...
		Type checking for addition - Adding strings - Subtracting strings...? i.e. type checking
	The scoping problem
		Want to determine TypeSystem before assembler
		But assembler is currently determining scoping rules
		So before assembler, all variables with the same name
			refer to the same Symbol, and the TypeSystem
			has ALREADY LABELED them as bool, int, or string, 
			if the information is available
		What if you want to use a variable of the same name in two different functions?
			In one function it's a string, in the other an int?
		Time to create "var a = 0;" and "var a;" declarations
		Otherwise, it becomes unclear what should be happening

		Nodes
			Construct SCOPE
				Node.scope
			Construct VARIABLE
				Node.variable
				Node.variable.symbol
			Construct LITERAL
				Node.symbol

		parseNode
			Construct SCOPE
				Node.scope = new Scope()
			Construct VARIABLE
				Node.variable = new Variable()

		typeCheck
			Construct VARIABLE
				Node.variable.type
			Construct LITERAL
				Node.type

		assembler
			Construct SCOPE
				Auto allocate stack space for all variables
			Construct VARIABLE
				Reference variable from Node.variable
			
			
	Scope in lexer and SymbolTable and optimizer
		Can delete parser, symboltable, node scopes?
	Need to figure out how to allocate heap memory. 
		int_to_string should be stored in heap?

Nodes traversal and node values should be split
	A la inherit Node
	Or at least non-traversal Node properties should be abstracted more


Language additions
	Loops
	Return statements
	Return type
	Wait command?

Arbitrary grammar selection
	Arguably, this should interfere minimally with back-end development
	since optimizedTree is based on Element/Constructs, which will 
	remain essentially unchanged. Thus, this can wait until after basic back-end
	development.

	abstract SrcLanguage
		Terminals <==> Token
			exact String
			start regex
			full regex
			TypeSystem type
			Construct construct

		# Declare first
		NonTerminals

		# Then apply CFG rules
		CFG Rules

		Reflow Rules

	"Elements" -> "Constructs"
		Reflow rules -> SrcLanguage
		Class Constructs should have very little
			except maybe a swatch of documentation on construct expectations

	# I don't think this applies any more
	# Keeping for now for reference
	Token
		Token should be an interface
		All terminals and non-terminals should be added once as enums
		All rules should be added after static initialization

		NonTerminal constructors should take CFGPattern and PrecedencePattern as parameters  
			Can make firstTerminalsAndPatterns and follow do the work of the NonTerminal constructor?
			Make Token prettier :'-(
		Should be Token, not Terminal or NonTerminal:
			element type
			Terminal only:
				exactString, element type, etc


Long term
	TokenStream rightIndex should be inclusive? I didn't forsee right-to-left rules at the time of development.